Test `@mel.spread` + string/int polyvariants

  $ . ./setup.sh

  $ cat > x.ml <<EOF
  > external foo : ([ \`foo of string ][@mel.spread]) -> unit = "someFnCall"
  > let () = foo (\`foo "hello")
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  someFnCall("foo", "hello");
  /*  Not a pure module */

  $ cat > x.ml <<EOF
  > external foo :
  >   ([ \`foo of string [@mel.as "hello"]][@mel.spread])
  >   -> unit = "someFnCall"
  > let () = foo (\`foo "hello")
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  someFnCall("hello", "hello");
  /*  Not a pure module */

  $ cat > x.ml <<EOF
  > external foo :
  >   ([ \`foo of string [@mel.as "hello"]
  >    | \`bar of int
  >    | \`baz of int [@mel.as 3]
  >    ][@mel.spread])
  >   -> unit = "someFnCall"
  > let () =
  >   foo (\`foo "hello");
  >   foo (\`bar 42);
  >   foo (\`baz 43)
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  someFnCall("hello", "hello");
  
  someFnCall("bar", 42);
  
  someFnCall(3, 43);
  /*  Not a pure module */

Unary polyvariants (no payload) aren't supported

  $ cat > x.ml <<EOF
  > external foo : ([ \`foo ][@mel.spread]) -> unit = "someFnCall"
  > let () = foo \`foo
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 16-24:
  1 | external foo : ([ `foo ][@mel.spread]) -> unit = "someFnCall"
                      ^^^^^^^^
  Error: Invalid type for `[@mel.spread]'
  [2]

