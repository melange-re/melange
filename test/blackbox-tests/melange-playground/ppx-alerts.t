  $ cat > input.js <<EOF
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/playground/mel_playground.bc.js');
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/playground/melange-cmijs.js');
  > console.log(ocaml.compileRE('external foo: (([@mel.uncurry] (unit => unit)) => [@mel.uncurry] (unit => unit)) => unit = "Array.from"'));
  > EOF

  $ node input.js
  {
    js_code: '// Generated by Melange\n' +
      "/* This output is empty. Its source's type definitions, externals and/or unused code got optimized away. */\n",
    warnings: [
      {
        js_warning_error_msg: 'Line 1, 18:\n' +
          '  Alert: unused Unused attribute [@mel.uncurry]\n' +
          'This means such annotation is not annotated properly.\n' +
          'For example, some annotations are only meaningful in externals\n',
        row: 0,
        column: 18,
        endRow: 0,
        endColumn: 29,
        text: 'Unused attribute [@mel.uncurry]\n' +
          'This means such annotation is not annotated properly.\n' +
          'For example, some annotations are only meaningful in externals\n',
        type: 'alert'
      },
      {
        js_warning_error_msg: 'Line 1, 52:\n' +
          '  Alert: unused Unused attribute [@mel.uncurry]\n' +
          'This means such annotation is not annotated properly.\n' +
          'For example, some annotations are only meaningful in externals\n',
        row: 0,
        column: 52,
        endRow: 0,
        endColumn: 63,
        text: 'Unused attribute [@mel.uncurry]\n' +
          'This means such annotation is not annotated properly.\n' +
          'For example, some annotations are only meaningful in externals\n',
        type: 'alert'
      }
    ],
    type_hints: [
      { start: [Object], end: [Object], kind: 'core_type', hint: 'unit' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'unit' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'unit' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'unit -> unit'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'unit' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'unit' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'unit -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: '(unit -> unit) -> unit -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: '((unit -> unit) -> unit -> unit) -> unit'
      }
    ]
  }
