  $ cat > input.js <<EOF
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/playground/mel_playground.bc.js');
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/playground/melange-cmijs.js');
  > console.log(ocaml.compileML(\`type person = {
  >   name: string ;
  >   age: int
  > }[@@deriving jsProperties, getSet]
  > 
  > let person1: person = person ~name:"joe" ~age:10\`));
  > EOF

  $ node input.js
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      '\n' +
      'var person1 = {\n' +
      '  name: "joe",\n' +
      '  age: 10\n' +
      '};\n' +
      '\n' +
      'export {\n' +
      '  person1 ,\n' +
      '}\n' +
      '/* No side effect */\n',
    warnings: [],
    type_hints: [
      { start: [Object], end: [Object], kind: 'expression', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'name:string -> age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      { start: [Object], end: [Object], kind: 'binding', hint: 'person' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person -> int'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person -> string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'name:string -> age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'person -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'binding',
        hint: 'person -> unit'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'type_declaration',
        hint: 'type person = { name : string; age : int; }'
      }
    ]
  }
