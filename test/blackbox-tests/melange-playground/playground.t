Prepare an input file to test some snippets to exercise common functionality

  $ cat > input.js <<EOF
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/bin/jsoo_main.bc.js');
  > require(process.env.DUNE_SOURCEROOT + '/_build/default/bin/melange-cmijs.js');
  > console.log(ocaml.compileML("let t = 1"));
  > console.log(ocaml.compileML(\`let john = [%mel.obj { name = "john"; age = 99 }] let t = john##name\`));
  > console.log(ocaml.compileML(\`let foo = Belt.List.map\`));
  > console.log(ocaml.compileML(\`let +foo\`));
  > console.log(ocaml.compileML(\`let foo = "" + 2\`));
  > console.log(ocaml.compileML(\`type person = {
  >   name: string ;
  >   age: int
  > }[@@deriving abstract]
  > 
  > let person1: person = person ~name:"joe" ~age:10\`));
  > console.log(ocaml.printML(ocaml.parseRE(\`let foo = <div />\`)));
  > console.log(ocaml.printML(ocaml.parseRE("//")));
  > console.log(ocaml.compileML("let t = [%mel.obj 2]"));
  > try { ocaml.parseRE("type t = 2") } catch (e) { console.log(e); };
  > console.log(ocaml.compileRE("let t = 1;"));
  > console.log(ocaml.compileRE("let sum = item => swiftch (item) { | Leaf => 0 };").js_error_msg.trim()); // Some Reason errors dont have locations
  > console.log(ocaml.compileRE("let sum = item => swiftch (item) { 2 };")); // but some do
  > console.log(ocaml.compileML("let t = 2;; 3;; 5"));
  > EOF

  $ node input.js
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      '\n' +
      'var t = 1;\n' +
      '\n' +
      'export {\n' +
      '  t ,\n' +
      '}\n' +
      '/* No side effect */\n',
    type_hints: [
      { start: [Object], end: [Object], kind: 'expression', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'int'
      },
      { start: [Object], end: [Object], kind: 'binding', hint: 'int' }
    ]
  }
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      '\n' +
      'var john = {\n' +
      '  name: "john",\n' +
      '  age: 99\n' +
      '};\n' +
      '\n' +
      'var t = john.name;\n' +
      '\n' +
      'export {\n' +
      '  john ,\n' +
      '  t ,\n' +
      '}\n' +
      '/* t Not a pure module */\n',
    type_hints: [
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: '< age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: '< age : int; name : string > Js.t Js__.Js_internal.t ->\n' +
          '< age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: '< age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'string'
      },
      { start: [Object], end: [Object], kind: 'binding', hint: 'string' },
      { start: [Object], end: [Object], kind: 'expression', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'name:string -> age:int -> < age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: '< age : int; name : string > Js.t'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a1" },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a1" },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a0" },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a0" },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: "< age : 'a1; name : 'a0 >"
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: "< age : 'a1; name : 'a0 > Js.t"
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a1" },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: "age:'a1 -> < age : 'a1; name : 'a0 > Js.t"
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: "'a0" },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: "name:'a0 -> age:'a1 -> < age : 'a1; name : 'a0 > Js.t"
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: '< age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: '< age : int; name : string > Js.t'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'binding',
        hint: '< age : int; name : string > Js.t'
      }
    ]
  }
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      'import * as Belt__Belt_List from "melange.belt/belt_List.js";\n' +
      '\n' +
      'var foo = Belt__Belt_List.map;\n' +
      '\n' +
      'export {\n' +
      '  foo ,\n' +
      '}\n' +
      '/* No side effect */\n',
    type_hints: [
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: "'a Belt.List.t -> ('a -> 'b) -> 'b Belt.List.t"
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: "'a Belt.List.t -> ('a -> 'b) -> 'b Belt.List.t"
      },
      {
        start: [Object],
        end: [Object],
        kind: 'binding',
        hint: "'a Belt.List.t -> ('a -> 'b) -> 'b Belt.List.t"
      }
    ]
  }
  {
    js_error_msg: 'Line 1, 5:\n  Error Syntax error',
    row: 0,
    column: 5,
    endRow: 0,
    endColumn: 8,
    text: 'Syntax error',
    type: 'error'
  }
  {
    js_error_msg: 'Line 1, 10:\n' +
      '  Error This expression has type string but an expression was expected of type int',
    row: 0,
    column: 10,
    endRow: 0,
    endColumn: 12,
    text: 'This expression has type string but an expression was expected of type int',
    type: 'error'
  }
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      '\n' +
      'var person1 = {\n' +
      '  name: "joe",\n' +
      '  age: 10\n' +
      '};\n' +
      '\n' +
      'export {\n' +
      '  person1 ,\n' +
      '}\n' +
      '/* No side effect */\n',
    type_hints: [
      { start: [Object], end: [Object], kind: 'expression', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'name:string -> age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      { start: [Object], end: [Object], kind: 'binding', hint: 'person' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person -> int'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person -> string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'name:string -> age:int -> person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'expression',
        hint: 'person -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'person -> unit'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'binding',
        hint: 'person -> unit'
      },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      { start: [Object], end: [Object], kind: 'core_type', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'core_type',
        hint: 'string'
      },
      {
        start: [Object],
        end: [Object],
        kind: 'type_declaration',
        hint: 'type person = { name : string; age : int; }'
      }
    ]
  }
  let foo = ((div ~children:[] ())[@JSX ])
  
  {
    js_error_msg: 'Line 1, 8:\n  Error Expect a record expression here',
    row: 0,
    column: 8,
    endRow: 0,
    endColumn: 20,
    text: 'Expect a record expression here',
    type: 'error'
  }
  {
    message: 'File "_none_", line 1, characters 9-10:\nError: Syntax error\n\n',
    location: {
      startLine: 1,
      startLineStartChar: 10,
      endLine: 1,
      endLineEndChar: 10
    }
  }
  {
    js_code: '// Generated by Melange\n' +
      '\n' +
      '\n' +
      'var t = 1;\n' +
      '\n' +
      'export {\n' +
      '  t ,\n' +
      '}\n' +
      '/* No side effect */\n',
    type_hints: [
      { start: [Object], end: [Object], kind: 'expression', hint: 'int' },
      {
        start: [Object],
        end: [Object],
        kind: 'pattern_type',
        hint: 'int'
      },
      { start: [Object], end: [Object], kind: 'binding', hint: 'int' }
    ]
  }
  File "_none_", line 1, characters 35-36:
  Error: Unclosed "{" (opened line 1, column 33)
  {
    js_error_msg: 'Line 1, 18:\n  Error Unbound value swiftch',
    row: 0,
    column: 18,
    endRow: 0,
    endColumn: 25,
    text: 'Unbound value swiftch',
    type: 'error'
  }
  {
    warning_errors: [
      {
        js_error_msg: 'Line 1, 12:\n' +
          '  Error: (warning 109 [bucklescript-toplevel-expr-unit]) Toplevel expression is expected to have unit type.',
        row: 0,
        column: 12,
        endRow: 0,
        endColumn: 13,
        text: 'Toplevel expression is expected to have unit type.',
        type: 'warning_as_error'
      },
      {
        js_error_msg: 'Line 1, 16:\n' +
          '  Error: (warning 109 [bucklescript-toplevel-expr-unit]) Toplevel expression is expected to have unit type.',
        row: 0,
        column: 16,
        endRow: 0,
        endColumn: 17,
        text: 'Toplevel expression is expected to have unit type.',
        type: 'warning_as_error'
      }
    ],
    type: 'warning_errors'
  }
