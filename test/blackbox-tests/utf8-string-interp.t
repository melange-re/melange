

  $ . ./setup.sh
  $ cat > x.ml <<EOF
  > let x = {j| Hello, \$()|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 19-22:
  1 | let x = {j| Hello, $()|j}
                         ^^^
  Error: `' is not a valid syntax of interpolated identifer
  [2]

  $ cat > x.ml <<EOF
  > let x = {j| Hello, \$(   )|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 19-25:
  1 | let x = {j| Hello, $(   )|j}
                         ^^^^^^
  Error: `   ' is not a valid syntax of interpolated identifer
  [2]

`{j| .. |j}` interpolation is strict about string arguments

  $ cat > x.ml <<EOF
  > let x =
  >   let y = 3 in
  >   {j| Hello, \$(y)|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 3, characters 15-16:
  3 |   {j| Hello, $(y)|j}
                     ^
  Error: This expression has type int but an expression was expected of type
           string
  [2]

`{j| .. |j}` interpolation with expressions

  $ cat > x.ml <<EOF
  > let x =
  >   let y = 3 in
  >   {j| Hello, \$(y + y |> Js.String.make)|j}
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  var x = " Hello, " + String(6);
  
  exports.x = x;
  /* x Not a pure module */

Interpolation expression errors

  $ cat > x.ml <<EOF
  > let x =
  >   let y = 3 in
  >   {j| Hello, \$(y + y |>)|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 3, characters 15-23:
  3 |   {j| Hello, $(y + y |>)|j}
                     ^^^^^^^^
  Error: Syntax error
  [2]

  $ cat > x.ml <<EOF
  > let x =
  >   let y = 3 in
  >   {j| Hello, \$(y + y)|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 3, characters 15-20:
  3 |   {j| Hello, $(y + y)|j}
                     ^^^^^
  Error: This expression has type int but an expression was expected of type
           string
  [2]

  $ cat > x.ml <<EOF
  > let x =
  >   let y = 3 in
  >   {j| Hello, \$(y +)|j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 3, characters 15-18:
  3 |   {j| Hello, $(y +)|j}
                     ^^^
  Error: Syntax error
  [2]

  $ cat > x.ml <<EOF
  > let x =
  >   {j|\$(()) |j}
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 2, characters 7-9:
  2 |   {j|$(()) |j}
             ^^
  Error: This expression has type unit but an expression was expected of type
           string
  [2]
