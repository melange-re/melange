Showcase `@mel.send.pipe` with an expression

  $ . ./setup.sh
  $ cat > x.ml <<EOF
  > external f : int -> int -> int array -> unit = "f" [@@mel.send.pipe: int]
  > external g : int -> int -> int array -> unit = "g" [@@mel.send.pipe int]
  > EOF
  $ melc -ppx melppx -dsource x.ml
  external f :
    int -> int -> int array -> int -> unit = "f"
      "\132\149\166\190\000\000\000\011\000\000\000\004\000\000\000\014\000\000\000\014\176\145DE\213!f@A@@"
  [@@ocaml.warning "-unboxable-type-in-prim-decl"]
  external g :
    int -> int -> int array -> int -> unit = "g"
      "\132\149\166\190\000\000\000\011\000\000\000\004\000\000\000\014\000\000\000\014\176\145DE\213!g@A@@"
  [@@ocaml.warning "-unboxable-type-in-prim-decl"]
  // Generated by Melange
  /* This output is empty. Its source's type definitions, externals and/or unused code got optimized away. */

Show an error if the payload is invalid:

  $ cat > x.ml <<EOF
  > external g : int -> int -> int array -> unit = "g" [@@mel.send.pipe? { x = y }]
  > EOF
  $ melc -ppx melppx -alert -unprocessed x.ml
  File "x.ml", line 1, characters 54-67:
  1 | external g : int -> int -> int array -> unit = "g" [@@mel.send.pipe? { x = y }]
                                                            ^^^^^^^^^^^^^
  Error: Invalid `[@mel.send.pipe]' payload. Expected one of:
         - a type payload e.g. `[@mel.send.pipe: 'a array]'
         - an ident expression, e.g. `[@mel.send.pipe t]'
  [2]

