
  $ . ./setup.sh

Test some error cases

  $ cat > x.ml <<EOF
  > external valToFn : 'a -> (int -> 'a[@u0]) = "foo"
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 26-29:
  1 | external valToFn : 'a -> (int -> 'a[@u0]) = "foo"
                                ^^^
  Error: `[@u0]' can only be used with the `unit' type
  [2]

  $ cat > x.ml <<EOF
  > external valToFn : 'a -> (unit -> int -> 'a[@u0]) = "foo"
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 34-43:
  1 | external valToFn : 'a -> (unit -> int -> 'a[@u0]) = "foo"
                                        ^^^^^^^^^
  Error: `[@u0]' cannot be used with multiple arguments
  [2]

PPX shows an alert when `@u` is used with `unit`

  $ cat > x.ml <<EOF
  > external foo : (((unit -> unit)[@u]) -> unit) -> unit = "foo"
  > let () = foo (fun f -> f () [@u])
  > EOF

  $ melc -ppx melppx x.ml
  File "x.ml", line 1, characters 18-30:
  1 | external foo : (((unit -> unit)[@u]) -> unit) -> unit = "foo"
                        ^^^^^^^^^^^^
  Alert uncurried: This uncurried function takes a single unit argument, but will be applied with `undefined' in the compiled JS.
  Use `[@u0]' if it is intended to have 0-arity.
  // Generated by Melange
  'use strict';
  
  
  foo(function (f) {
        f(undefined);
      });
  
  /*  Not a pure module */
