Some examples on how the ## operator and Js.t interops with @u 

  $ . ./setup.sh

  $ cat > dune-project <<EOF
  > (lang dune 3.8)
  > (using melange 0.1)
  > EOF

  $ cat > dune <<EOF
  > (melange.emit
  >  (target melange)
  >  (alias mel)
  >  (modules main)
  >  (preprocess (pps melange.ppx))
  >  (emit_stdlib false)
  >  (module_systems commonjs))
  > EOF

Calling to a function without using @u leads to code using uncurry

  $ cat > main.ml <<EOF
  > let props : < foo : int -> string -> string > Js.t =
  >   [%mel.raw
  >     {|
  >   {
  >     foo: function(a, b) {
  >       console.log("a", a);
  >       console.log("b", b);
  >     }
  >   }|}]
  > 
  > let foo = props##foo
  > let x = foo 123 "abc"
  > EOF

  $ dune build @mel

  $ cat _build/default/melange/main.js
  // Generated by Melange
  'use strict';
  
  var Curry = require("melange.js/curry.js");
  
  var props = ({
      foo: function(a, b) {
        console.log("a", a);
        console.log("b", b);
      }
    });
  
  var foo = props.foo;
  
  var x = Curry._2(foo, 123, "abc");
  
  exports.props = props;
  exports.foo = foo;
  exports.x = x;
  /* props Not a pure module */

Calling to a function using @u leads to code not using uncurry

  $ cat > main.ml <<EOF
  > let props : < foo : (int -> string -> string[@u]) > Js.t =
  >   [%mel.raw
  >     {|
  >   {
  >     foo: function(a, b) {
  >       console.log("a", a);
  >       console.log("b", b);
  >     }
  >   }|}]
  > 
  > let foo = props##foo
  > let x = (foo 123 "abc" [@u])
  > EOF

  $ dune build @mel

  $ cat _build/default/melange/main.js
  // Generated by Melange
  'use strict';
  
  
  var props = ({
      foo: function(a, b) {
        console.log("a", a);
        console.log("b", b);
      }
    });
  
  var foo = props.foo;
  
  var x = foo(123, "abc");
  
  exports.props = props;
  exports.foo = foo;
  exports.x = x;
  /* props Not a pure module */

Trying to call ## directly leads to a strange build error

  $ cat > main.ml <<EOF
  > let props : < foo : int -> string -> string > Js.t =
  >   [%mel.raw
  >     {|
  >   {
  >     foo: function(a, b) {
  >       console.log("a", a);
  >       console.log("b", b);
  >     }
  >   }|}]
  > 
  > let x = props##foo 123 "abc"
  > EOF

  $ dune build @mel
  File "main.ml", line 11, characters 8-18:
  11 | let x = props##foo 123 "abc"
               ^^^^^^^^^^
  Error: This expression has type int -> string -> string
         but an expression was expected of type 'a Js__Js_OO.Meth.arity2
  [1]

