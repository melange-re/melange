Tests for deriving `jsProperties, getSet`

  $ . ./setup.sh

`[@@deriving jsProperties, getSet]` respects `[@mel.unwrap]`

  $ cat > x.ml <<EOF
  > type t = {
  >   mutable action : [ \`String of string | \`Int of int ] option;
  >       [@mel.unwrap] [@mel.optional]
  >   other : [ \`String of int | \`Int of string ] option; [@mel.optional]
  > }
  > [@@deriving jsProperties, getSet]
  > let () =
  >   let t = t ~action:(\`String "hello") () in
  >   (* Set action and expect the value to be unwrapped in the object too *)
  >   actionSet t (\`String "hello2");
  >   Js.log2 "Action after setting: " t
  > EOF
  $ melc -ppx melppx -dsource x.ml
  type t =
    {
    mutable action: [ `String of string  | `Int of int ] option
      [@mel.unwrap ][@mel.optional ];
    other: [ `String of int  | `Int of string ] option [@mel.optional ]}
  [@@deriving (jsProperties, getSet)]
  include
    struct
      let _ = fun (_ : t) -> ()
      external t :
        ?action:(([ `String of string  | `Int of int ])[@mel.unwrap ]) ->
          ?other:[ `String of int  | `Int of string ] -> unit -> t = ""
          "\132\149\166\190\000\000\000\029\000\000\000\011\000\000\000 \000\000\000\030\145\160\160C\161&action@\160\160A\161%other@\160\160@@@"
      [@@ocaml.warning "-unboxable-type-in-prim-decl"][@@ocaml.warning
                                                        "-unboxable-type-in-prim-decl"]
      external actionSet :
        t -> [ `String of string  | `Int of int ] -> unit = "action"
          "\132\149\166\190\000\000\000\r\000\000\000\004\000\000\000\012\000\000\000\011\176\145BE\167&action@"
      [@@ocaml.warning "-unboxable-type-in-prim-decl"][@@ocaml.warning
                                                        "-unboxable-type-in-prim-decl"]
      external actionGet :
        t -> [ `String of string  | `Int of int ] option = "action"
          "\132\149\166\190\000\000\000\r\000\000\000\004\000\000\000\012\000\000\000\011\176\145AB\168&action@"
      [@@ocaml.warning "-unboxable-type-in-prim-decl"]
      external otherGet :
        t -> [ `String of int  | `Int of string ] option = "other"
          "\132\149\166\190\000\000\000\012\000\000\000\004\000\000\000\012\000\000\000\011\176\145AB\168%other@"
      [@@ocaml.warning "-unboxable-type-in-prim-decl"]
    end[@@ocaml.doc "@inline"][@@merlin.hide ]
  let t = ((t ~action:(`String "hello") ())
    [@ocaml.warning "-ignored-extra-argument"][@ocaml.warning
                                                "-ignored-extra-argument"])
  // Generated by Melange
  'use strict';


  const t = {
    action: "hello"
  };

  exports.t = t;
  /* No side effect */



