
  $ . ./setup.sh
  $ cat > dune-project <<EOF
  > (lang dune 3.9)
  > (using melange 0.1)
  > EOF

  $ cat > dune <<EOF
  > (melange.emit
  >  (target js-out)
  >  (preprocess (pps melange.ppx))
  >  (emit_stdlib false))
  > EOF

  $ cat > x.ml <<EOF
  > type (_, _) x =
  >   | [] : ('a, 'a) x
  >   | ( :: ) : 'a * ('ty, 'v) x -> ('a -> 'ty, 'v) x
  > let rec f : type a b. (a, string ref) x -> string =
  >  fun x -> match x with [] -> "empty" | _ :: xs -> f xs
  > EOF

  $ dune build @melange
  $ cat ./_build/default/js-out/x.js
  // Generated by Melange
  'use strict';
  
  
  function f(_x) {
    while(true) {
      const x = _x;
      if (!x) {
        return "empty";
      }
      _x = x.tl;
      continue ;
    };
  }
  
  exports.f = f;
  /* No side effect */

  $ cat > x.ml <<EOF
  > type (_, _) x =
  >   | [] : ('a, 'a) x [@mel.as "lol"]
  >   | ( :: ) : 'a * ('ty, 'v) x -> ('a -> 'ty, 'v) x
  > 
  > let x : _ x = []
  > 
  > let rec f : type a b. (a, string ref) x -> string =
  >  fun x -> match x with [] -> "empty" | _ :: xs -> f xs
  > EOF

  $ dune build @melange
  $ cat ./_build/default/js-out/x.js
  // Generated by Melange
  'use strict';
  
  
  function f(_x) {
    while(true) {
      const x = _x;
      if (!x) {
        return "empty";
      }
      _x = x.tl;
      continue ;
    };
  }
  
  const x = /* [] */"lol";
  
  exports.x = x;
  exports.f = f;
  /* No side effect */
