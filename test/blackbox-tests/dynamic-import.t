Demonstrate dynamic `import()` semantics

  $ . ./setup.sh

  $ cat > dune-project <<EOF
  > (lang dune 3.9)
  > (using melange 0.1)
  > EOF

  $ cat > dune <<EOF
  > (melange.emit
  >  (target out)
  >  (preprocess (pps melange.ppx))
  >  (emit_stdlib false))
  > EOF

  $ cat > x.ml <<EOF
  > module type y = module type of Y
  > let x () = Js.import (module Y : y)
  > module type z = module type of Z
  > let a = Js.import (module Z : z)
  > let b = Js.import Y.x
  > EOF

  $ cat > y.ml <<EOF
  > let x = 1
  > EOF

  $ cat > z.ml <<EOF
  > let a = Array.iter Js.log [| 1 |]
  > EOF

  $ dune build @melange

  $ cat _build/default/out/x.js
  // Generated by Melange
  'use strict';
  
  
  function x(param) {
    return import("./y.js");
  }
  
  const a = import("./z.js");
  
  const b = import("./y.js").then(function (m) {
        return m.x;
      });
  
  exports.x = x;
  exports.a = a;
  exports.b = b;
  /* Melange__Z Not a pure module */
