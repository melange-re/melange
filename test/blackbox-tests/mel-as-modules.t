Use `[@mel.as]` to change how module output name in resulting JS

  $ . ./setup.sh
  $ cat > dune-project <<EOF
  > (lang dune 3.8)
  > (using melange 0.1)
  > EOF
  $ cat > dune <<EOF
  > (melange.emit
  >  (compile_flags -w -32)
  >  (emit_stdlib false)
  >  (preprocess (pps melange.ppx))
  >  (target js-out))
  > EOF

  $ cat > x.ml <<EOF
  > module[@mel.as "Obj"] Object = struct end
  > EOF

  $ dune build @melange
  File "x.ml", line 1, characters 8-14:
  1 | module[@mel.as "Obj"] Object = struct end
              ^^^^^^
  Alert unused: Unused attribute [@mel.as]
  This means such annotation is not annotated properly.
  For example, some annotations are only meaningful in externals
  



  $ cat _build/default/js-out/x.js
  // Generated by Melange
  'use strict';
  
  
  var $$Object = {};
  
  exports.$$Object = $$Object;
  /* No side effect */

Also applies to signatures

  $ dune clean
  $ cat > x.ml <<EOF
  > module[@mel.as "Objx"] Object = struct end
  > EOF
  $ cat > x.mli <<EOF
  > module[@mel.as "Objy"] Object : sig end
  > EOF

  $ dune build @melange
  File "x.mli", line 1, characters 8-14:
  1 | module[@mel.as "Objy"] Object : sig end
              ^^^^^^
  Alert unused: Unused attribute [@mel.as]
  This means such annotation is not annotated properly.
  For example, some annotations are only meaningful in externals
  
  File "x.ml", line 1, characters 8-14:
  1 | module[@mel.as "Objx"] Object = struct end
              ^^^^^^
  Alert unused: Unused attribute [@mel.as]
  This means such annotation is not annotated properly.
  For example, some annotations are only meaningful in externals
  
  $ cat _build/default/js-out/x.js
  // Generated by Melange
  'use strict';
  
  
  var $$Object = {};
  
  exports.$$Object = $$Object;
  /* No side effect */

