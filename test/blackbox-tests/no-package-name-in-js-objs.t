Set up a few directories we'll need

  $ mkdir -p lib
  $ mkdir -p app
  $ mkdir -p lib/.objs/melange
  $ mkdir -p app/.objs/melange
  $ mkdir -p output/lib
  $ mkdir -p output/app

  $ echo "let t = 1" > lib/a.ml
  $ echo "let t = A.t" > app/b.ml

If we don't have a package name, melc should allow not passing one

Can't `-bs-module-type` and `-bs-package-output`

  $ melc -bs-module-type es6 -bs-package-output lib/ -bs-stop-after-cmj -nopervasives lib/a.ml -o lib/.objs/melange/a.cmj
  melc: Can't pass both `-bs-package-output` and `-bs-module-type`
  [124]

Now compile for real

  $ melc -bs-package-output lib/ -bs-stop-after-cmj -nopervasives lib/a.ml -o lib/.objs/melange/a.cmj

  $ melc -bs-package-output app/ -I lib/.objs/melange app/b.ml -nopervasives -bs-stop-after-cmj -o app/.objs/melange/b.cmj

The linking step just needs `-bs-module-type`, it already knows the package
paths

  $ melc -bs-module-type commonjs -nopervasives lib/.objs/melange/a.cmj -o output/lib/a.js

  $ melc -bs-module-type commonjs -nopervasives -I lib/.objs/melange app/.objs/melange/b.cmj -o output/app/b.js

B depends on A, so it should import a.js in the right path

  $ cat output/app/b.js
  // Generated by Melange
  'use strict';
  
  var A = require("../lib/a.js");
  
  var t = A.t;
  
  exports.t = t;
  /* No side effect */
