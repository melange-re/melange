
  $ . ./setup.sh

  $ cat > x.ml <<EOF
  > let foo a =
  >   let a = Some a in
  >   match a with
  >   | Some true -> "it's true"
  >   | _ -> "it's false"
  > let () = Js.log (foo false)
  > EOF

  $ melc x.ml | tee x.js
  // Generated by Melange
  'use strict';
  
  
  function foo(a) {
    const a$1 = a;
    if (a$1) {
      return "it's true";
    } else {
      return "it's false";
    }
  }
  
  console.log("it's false");
  
  module.exports = {
    foo,
  }
  /*  Not a pure module */

  $ node x.js
  it's false

  $ cat > x.ml <<EOF
  > let foo a =
  >   let a = Some a in
  >   match a with
  >   | Some true -> "it's true"
  >   | _ -> "it's false"
  > let bar b =
  >   Js.log "bar";
  >   foo b
  > let () = Js.log (bar false)
  > EOF

  $ melc x.ml | tee x.js
  // Generated by Melange
  'use strict';
  
  
  function foo(a) {
    const a$1 = a;
    if (a$1) {
      return "it's true";
    } else {
      return "it's false";
    }
  }
  
  function bar(b) {
    console.log("bar");
    return foo(b);
  }
  
  console.log(bar(false));
  
  module.exports = {
    foo,
    bar,
  }
  /*  Not a pure module */
  $ node x.js
  bar
  it's false

  $ cat > x.ml <<EOF
  > let foo a =
  >   match a with
  >   | Some true -> "it's true"
  >   | _ -> "it's false"
  > external undef: _ array -> bool option = "nah" [@@mel.return nullable] [@@mel.get]
  > let () = Js.log (foo (undef [||]))
  > EOF

  $ melc -ppx melppx x.ml | tee x.js
  // Generated by Melange
  'use strict';
  
  const Caml_option = require("melange.js/caml_option.js");
  
  function foo(a) {
    if (a !== undefined && a) {
      return "it's true";
    } else {
      return "it's false";
    }
  }
  
  console.log(foo(Caml_option.nullable_to_opt([].nah)));
  
  module.exports = {
    foo,
  }
  /*  Not a pure module */
