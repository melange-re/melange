Test `@mel.as` without `@mel.string` / `@mel.int` in external polyvars

  $ . ./setup.sh
  $ cat > x.ml <<EOF
  > type t = unit
  > external transition_timing_function :
  >   t ->
  >   [ \`ease
  >   | \`easeIn [@mel.as "ease-in"]
  >   ] ->
  >   unit = "transitionTimingFunction"
  > let () = transition_timing_function () \`easeIn
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  transitionTimingFunction(undefined, "ease-in");
  /*  Not a pure module */

  $ cat > x.ml <<EOF
  > type t = unit
  > external transition_timing_function :
  >   t ->
  >   [ \`ease
  >   | \`easeIn [@mel.as 1]
  >   | \`easeOut [@mel.as 2]
  >   ] ->
  >   unit = "transitionTimingFunction"
  > let () = transition_timing_function () \`easeIn
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  transitionTimingFunction(undefined, 1);
  /*  Not a pure module */

  $ cat > x.ml <<EOF
  > type t = unit
  > external transition_timing_function :
  >   t ->
  >   [ \`ease
  >   | \`easeIn [@mel.as "ease-in"]
  >   | \`easeOut [@mel.as 1]
  >   ] ->
  >   unit = "transitionTimingFunction"
  > let () = transition_timing_function () \`easeIn
  > let () = transition_timing_function () \`easeOut
  > EOF
  $ melc -ppx melppx x.ml
  // Generated by Melange
  'use strict';
  
  
  transitionTimingFunction(undefined, "ease-in");
  
  transitionTimingFunction(undefined, 1);
  /*  Not a pure module */

  $ cat > x.ml <<EOF
  > type t = unit
  > external transition_timing_function :
  >   t ->
  >   [ \`ease
  >   | \`easeIn [@mel.as 1] [@mel.as "ease-in"]
  >   | \`easeOut
  >   ] ->
  >   unit = "transitionTimingFunction"
  > let () = transition_timing_function () \`easeIn
  > EOF
  $ melc -ppx melppx x.ml
  File "x.ml", line 5, characters 26-32:
  5 |   | `easeIn [@mel.as 1] [@mel.as "ease-in"]
                                ^^^^^^
  Error: Duplicate `@mel.as'
  [2]

