  $ export MELANGELIB="$INSIDE_DUNE/lib/melange"

Set up a few directories we'll need

  $ mkdir -p node_modules
  $ mkdir -p app
  $ mkdir -p node_modules/.objs/melange
  $ mkdir -p app/.objs/melange
  $ mkdir -p output/node_modules
  $ mkdir -p output/app

  $ echo "let t = 1" > node_modules/a.ml
  $ cat > app/b.ml << EOF
  > let u = A.t
  > let t = ["Hello"] |. Belt.List.map(fun greeting -> greeting)
  > EOF

Cmjs

  $ melc -bs-package-output node_modules/ -bs-stop-after-cmj -nopervasives node_modules/a.ml -o node_modules/.objs/melange/a.cmj

  $ melc -bs-package-output app/ -I node_modules/.objs/melange app/b.ml -nopervasives -bs-stop-after-cmj -o app/.objs/melange/b.cmj

Jss

  $ melc -bs-module-type commonjs -nopervasives node_modules/.objs/melange/a.cmj -o output/node_modules/a.js

  $ melc -bs-module-type commonjs -nopervasives -I node_modules/.objs/melange app/.objs/melange/b.cmj -o output/app/b.js

B depends on A, so it should import a.js in the right path

  $ cat output/app/b.js
  // Generated by Melange
  'use strict';
  
  var A = require("../node_modules/a.js");
  
  var t = A.t;
  
  exports.t = t;
  /* No side effect */
