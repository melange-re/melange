Set up a few directories we'll need

  $ export MELANGELIB="$INSIDE_DUNE/lib/melange"
  $ mkdir -p lib
  $ mkdir -p app
  $ mkdir -p lib/.objs/melange
  $ mkdir -p app/.objs/melange
  $ mkdir -p output/lib
  $ mkdir -p output/app

  $ echo "let t = 1" > lib/a.ml

Using Lib__A here just for demoing purposes, Dune gen'd wrapping modules would
make this work with Lib.A.t

  $ echo "let t = Lib__A.t" > app/B.ml

Build cmjs

  $ melc -bs-stop-after-cmj lib/a.ml -o lib/.objs/melange/lib__A.cmj

  $ melc -I lib/.objs/melange -bs-stop-after-cmj app/B.ml -o app/.objs/melange/melange__B.cmj

Linking step

  $ melc -bs-package-output lib/ lib/.objs/melange/lib__A.cmj -o output/lib/a.js

Note casing is respected:
- module A was produced by a.ml, so output is a.js
- module B was produced by B.ml, so output is B.js

  $ melc -bs-package-output app/ -I lib/.objs/melange -I output/lib app/.objs/melange/melange__B.cmj -o output/app/B.js
  $ melc -bs-package-output app/ -I lib/.objs/melange -I output/lib app/.objs/melange/melange__B.cmj -o output/app/B.js

Path should point to proper name of the .js dep

  $ cat output/app/B.js
  // Generated by Melange
  'use strict';
  
  var A = require("../lib/a.js");
  
  var t = A.t;
  
  exports.t = t;
  /* No side effect */
