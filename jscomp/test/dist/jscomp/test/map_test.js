// Generated by Melange
'use strict';

let Caml = require("melange.js/caml.js");
let Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
let Curry = require("melange.js/curry.js");
let Mt = require("./mt.js");
let Stdlib = require("melange/stdlib.js");
let Stdlib__List = require("melange/list.js");
let Stdlib__String = require("melange/string.js");

let compare = Caml.caml_int_compare;

let Int = {
  compare: compare
};

function height(param) {
  if (param) {
    return param.h;
  } else {
    return 0;
  }
}

function create(l, x, d, r) {
  let hl = height(l);
  let hr = height(r);
  return /* Node */{
          l: l,
          v: x,
          d: d,
          r: r,
          h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
        };
}

function bal(l, x, d, r) {
  let hl = l ? l.h : 0;
  let hr = r ? r.h : 0;
  if (hl > (hr + 2 | 0)) {
    if (l) {
      let lr = l.r;
      let ld = l.d;
      let lv = l.v;
      let ll = l.l;
      if (height(ll) >= height(lr)) {
        return create(ll, lv, ld, create(lr, x, d, r));
      }
      if (lr) {
        return create(create(ll, lv, ld, lr.l), lr.v, lr.d, create(lr.r, x, d, r));
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "Map.bal"
              });
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Map.bal"
            });
  }
  if (hr <= (hl + 2 | 0)) {
    return /* Node */{
            l: l,
            v: x,
            d: d,
            r: r,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          };
  }
  if (r) {
    let rr = r.r;
    let rd = r.d;
    let rv = r.v;
    let rl = r.l;
    if (height(rr) >= height(rl)) {
      return create(create(l, x, d, rl), rv, rd, rr);
    }
    if (rl) {
      return create(create(l, x, d, rl.l), rl.v, rl.d, create(rl.r, rv, rd, rr));
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Map.bal"
            });
  }
  throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
            MEL_EXN_ID: "Invalid_argument",
            _1: "Map.bal"
          });
}

function add(x, data, m) {
  if (!m) {
    return /* Node */{
            l: /* Empty */0,
            v: x,
            d: data,
            r: /* Empty */0,
            h: 1
          };
  }
  let r = m.r;
  let d = m.d;
  let v = m.v;
  let l = m.l;
  let c = Curry._2(Int.compare, x, v);
  if (c === 0) {
    if (d === data) {
      return m;
    } else {
      return /* Node */{
              l: l,
              v: x,
              d: data,
              r: r,
              h: m.h
            };
    }
  }
  if (c < 0) {
    let ll = add(x, data, l);
    if (l === ll) {
      return m;
    } else {
      return bal(ll, v, d, r);
    }
  }
  let rr = add(x, data, r);
  if (r === rr) {
    return m;
  } else {
    return bal(l, v, d, rr);
  }
}

function cons_enum(_m, _e) {
  while(true) {
    let e = _e;
    let m = _m;
    if (!m) {
      return e;
    }
    _e = /* More */{
      _0: m.v,
      _1: m.d,
      _2: m.r,
      _3: e
    };
    _m = m.l;
    continue ;
  };
}

function compare$1(cmp, m1, m2) {
  let _e1 = cons_enum(m1, /* End */0);
  let _e2 = cons_enum(m2, /* End */0);
  while(true) {
    let e2 = _e2;
    let e1 = _e1;
    if (!e1) {
      if (e2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!e2) {
      return 1;
    }
    let c = Curry._2(Int.compare, e1._0, e2._0);
    if (c !== 0) {
      return c;
    }
    let c$1 = Curry._2(cmp, e1._1, e2._1);
    if (c$1 !== 0) {
      return c$1;
    }
    _e2 = cons_enum(e2._2, e2._3);
    _e1 = cons_enum(e1._2, e1._3);
    continue ;
  };
}

function equal(cmp, m1, m2) {
  let _e1 = cons_enum(m1, /* End */0);
  let _e2 = cons_enum(m2, /* End */0);
  while(true) {
    let e2 = _e2;
    let e1 = _e1;
    if (!e1) {
      if (e2) {
        return false;
      } else {
        return true;
      }
    }
    if (!e2) {
      return false;
    }
    if (Curry._2(Int.compare, e1._0, e2._0) !== 0) {
      return false;
    }
    if (!Curry._2(cmp, e1._1, e2._1)) {
      return false;
    }
    _e2 = cons_enum(e2._2, e2._3);
    _e1 = cons_enum(e1._2, e1._3);
    continue ;
  };
}

function cardinal(param) {
  if (param) {
    return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
  } else {
    return 0;
  }
}

function of_list(bs) {
  return Stdlib__List.fold_left((function (m, param) {
                return add(param[0], param[1], m);
              }), /* Empty */0, bs);
}

let funarg = {
  compare: Stdlib__String.compare
};

function height$1(param) {
  if (param) {
    return param.h;
  } else {
    return 0;
  }
}

function create$1(l, x, d, r) {
  let hl = height$1(l);
  let hr = height$1(r);
  return /* Node */{
          l: l,
          v: x,
          d: d,
          r: r,
          h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
        };
}

function bal$1(l, x, d, r) {
  let hl = l ? l.h : 0;
  let hr = r ? r.h : 0;
  if (hl > (hr + 2 | 0)) {
    if (l) {
      let lr = l.r;
      let ld = l.d;
      let lv = l.v;
      let ll = l.l;
      if (height$1(ll) >= height$1(lr)) {
        return create$1(ll, lv, ld, create$1(lr, x, d, r));
      }
      if (lr) {
        return create$1(create$1(ll, lv, ld, lr.l), lr.v, lr.d, create$1(lr.r, x, d, r));
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "Map.bal"
              });
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Map.bal"
            });
  }
  if (hr <= (hl + 2 | 0)) {
    return /* Node */{
            l: l,
            v: x,
            d: d,
            r: r,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          };
  }
  if (r) {
    let rr = r.r;
    let rd = r.d;
    let rv = r.v;
    let rl = r.l;
    if (height$1(rr) >= height$1(rl)) {
      return create$1(create$1(l, x, d, rl), rv, rd, rr);
    }
    if (rl) {
      return create$1(create$1(l, x, d, rl.l), rl.v, rl.d, create$1(rl.r, rv, rd, rr));
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Map.bal"
            });
  }
  throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
            MEL_EXN_ID: "Invalid_argument",
            _1: "Map.bal"
          });
}

function add$1(x, data, m) {
  if (!m) {
    return /* Node */{
            l: /* Empty */0,
            v: x,
            d: data,
            r: /* Empty */0,
            h: 1
          };
  }
  let r = m.r;
  let d = m.d;
  let v = m.v;
  let l = m.l;
  let c = Curry._2(funarg.compare, x, v);
  if (c === 0) {
    if (d === data) {
      return m;
    } else {
      return /* Node */{
              l: l,
              v: x,
              d: data,
              r: r,
              h: m.h
            };
    }
  }
  if (c < 0) {
    let ll = add$1(x, data, l);
    if (l === ll) {
      return m;
    } else {
      return bal$1(ll, v, d, r);
    }
  }
  let rr = add$1(x, data, r);
  if (r === rr) {
    return m;
  } else {
    return bal$1(l, v, d, rr);
  }
}

function find(x, _param) {
  while(true) {
    let param = _param;
    if (param) {
      let c = Curry._2(funarg.compare, x, param.v);
      if (c === 0) {
        return param.d;
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
}

let int_map_suites_0 = [
  "add",
  (function (param) {
      let v = Curry._1(of_list, {
            hd: [
              1,
              /* '1' */49
            ],
            tl: {
              hd: [
                2,
                /* '3' */51
              ],
              tl: {
                hd: [
                  3,
                  /* '4' */52
                ],
                tl: /* [] */0
              }
            }
          });
      return {
              TAG: /* Eq */0,
              _0: Curry._1(cardinal, v),
              _1: 3
            };
    })
];

let int_map_suites_1 = {
  hd: [
    "equal",
    (function (param) {
        let v = Curry._1(of_list, {
              hd: [
                1,
                /* '1' */49
              ],
              tl: {
                hd: [
                  2,
                  /* '3' */51
                ],
                tl: {
                  hd: [
                    3,
                    /* '4' */52
                  ],
                  tl: /* [] */0
                }
              }
            });
        let u = Curry._1(of_list, {
              hd: [
                2,
                /* '3' */51
              ],
              tl: {
                hd: [
                  3,
                  /* '4' */52
                ],
                tl: {
                  hd: [
                    1,
                    /* '1' */49
                  ],
                  tl: /* [] */0
                }
              }
            });
        return {
                TAG: /* Eq */0,
                _0: Curry._3(compare$1, Caml.caml_int_compare, u, v),
                _1: 0
              };
      })
  ],
  tl: {
    hd: [
      "equal2",
      (function (param) {
          let v = Curry._1(of_list, {
                hd: [
                  1,
                  /* '1' */49
                ],
                tl: {
                  hd: [
                    2,
                    /* '3' */51
                  ],
                  tl: {
                    hd: [
                      3,
                      /* '4' */52
                    ],
                    tl: /* [] */0
                  }
                }
              });
          let u = Curry._1(of_list, {
                hd: [
                  2,
                  /* '3' */51
                ],
                tl: {
                  hd: [
                    3,
                    /* '4' */52
                  ],
                  tl: {
                    hd: [
                      1,
                      /* '1' */49
                    ],
                    tl: /* [] */0
                  }
                }
              });
          return {
                  TAG: /* Eq */0,
                  _0: true,
                  _1: Curry._3(equal, (function (x, y) {
                          return x === y;
                        }), u, v)
                };
        })
    ],
    tl: {
      hd: [
        "iteration",
        (function (param) {
            let m = /* Empty */0;
            for(let i = 0; i <= 10000; ++i){
              m = Curry._3(add$1, String(i), String(i), m);
            }
            let v = -1;
            for(let i$1 = 0; i$1 <= 10000; ++i$1){
              if (Curry._2(find, String(i$1), m) !== String(i$1)) {
                v = i$1;
              }
              
            }
            return {
                    TAG: /* Eq */0,
                    _0: v,
                    _1: -1
                  };
          })
      ],
      tl: /* [] */0
    }
  }
};

let int_map_suites = {
  hd: int_map_suites_0,
  tl: int_map_suites_1
};

Mt.from_pair_suites("Map_test", int_map_suites);

/* Int_map Not a pure module */
