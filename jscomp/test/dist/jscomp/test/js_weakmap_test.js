// Generated by Melange
'use strict';

const Mt = require("./mt.js");

const suites_0 = [
  "add",
  (function (param) {
      const key = {};
      const weakmap = new WeakMap().set(key, "value");
      return {
              TAG: /* Eq */0,
              _0: true,
              _1: weakmap.has(key)
            };
    })
];

const suites_1 = {
  hd: [
    "delete - true",
    (function (param) {
        const key = {};
        const weakmap = new WeakMap().set(key, "value");
        const deleted = weakmap.delete(key);
        return {
                TAG: /* Eq */0,
                _0: [
                  true,
                  false
                ],
                _1: [
                  deleted,
                  weakmap.has(key)
                ]
              };
      })
  ],
  tl: {
    hd: [
      "delete - false",
      (function (param) {
          const key = {};
          const weakmap = new WeakMap().set(key, "value");
          const deleted = weakmap.delete({});
          return {
                  TAG: /* Eq */0,
                  _0: false,
                  _1: deleted
                };
        })
    ],
    tl: {
      hd: [
        "get",
        (function (param) {
            const key_a = {};
            const key_b = {};
            const weakmap = new WeakMap().set(key_a, "value_a");
            const a = weakmap.get(key_a);
            const b = weakmap.get(key_b);
            return {
                    TAG: /* Eq */0,
                    _0: [
                      "value_a",
                      undefined
                    ],
                    _1: [
                      a,
                      b
                    ]
                  };
          })
      ],
      tl: {
        hd: [
          "has",
          (function (param) {
              const key_a = {};
              const key_b = {};
              const weakmap = new WeakMap().set(key_a, "value_a").set(key_b, "value_b");
              const has_b_before = weakmap.has(key_b);
              weakmap.delete(key_b);
              const has_b_after = weakmap.has(key_b);
              return {
                      TAG: /* Eq */0,
                      _0: [
                        has_b_before,
                        has_b_after
                      ],
                      _1: [
                        true,
                        false
                      ]
                    };
            })
        ],
        tl: {
          hd: [
            "set mutate + return new weakmap",
            (function (param) {
                const key_a = {};
                const key_b = {};
                const weakmap_1 = new WeakMap();
                const weakmap_2 = weakmap_1.set(key_a, "value_a");
                const weakmap_3 = weakmap_2.set(key_b, "value_b");
                const all_has_b = weakmap_1.has(key_b) === true && weakmap_2.has(key_b) && weakmap_3.has(key_b);
                const all_same_ref = weakmap_1 === weakmap_2 && weakmap_2 === weakmap_3;
                return {
                        TAG: /* Eq */0,
                        _0: [
                          true,
                          true
                        ],
                        _1: [
                          all_has_b,
                          all_same_ref
                        ]
                      };
              })
          ],
          tl: /* [] */0
        }
      }
    }
  }
};

const suites = {
  hd: suites_0,
  tl: suites_1
};

Mt.from_pair_suites("Js_weakmap_test", suites);

exports.suites = suites;
/*  Not a pure module */
