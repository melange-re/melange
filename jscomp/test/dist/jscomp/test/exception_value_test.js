// Generated by Melange
'use strict';

const Caml_exceptions = require("melange.js/caml_exceptions.js");
const Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
const Curry = require("melange.js/curry.js");
const Js__Js_exn = require("melange.js/js_exn.js");
const Stdlib = require("melange/stdlib.js");

function f(param) {
  throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
            MEL_EXN_ID: Stdlib.Not_found
          });
}

function assert_f(x) {
  if (x <= 3) {
    throw new Caml_js_exceptions.MelangeError("Assert_failure", {
              MEL_EXN_ID: "Assert_failure",
              _1: [
                "jscomp/test/exception_value_test.ml",
                9,
                12
              ]
            });
  }
  return 3;
}

function hh(param) {
  throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
            MEL_EXN_ID: Stdlib.Not_found
          });
}

const A = /* @__PURE__ */Caml_exceptions.create("Exception_value_test.A");

const B = /* @__PURE__ */Caml_exceptions.create("Exception_value_test.B");

const C = /* @__PURE__ */Caml_exceptions.create("Exception_value_test.C");

const u = {
  MEL_EXN_ID: A,
  _1: 3
};

function test_not_found(f, param) {
  try {
    return Curry._1(f, undefined);
  }
  catch (raw_exn){
    const exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.MEL_EXN_ID === Stdlib.Not_found) {
      return 2;
    }
    throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
  }
}

function test_js_error2(param) {
  try {
    return JSON.parse(" {\"x\" : }");
  }
  catch (raw_e){
    const e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.MEL_EXN_ID === Js__Js_exn.$$Error) {
      console.log(e._1.stack);
      throw new Caml_js_exceptions.MelangeError(e.MEL_EXN_ID, e);
    }
    throw new Caml_js_exceptions.MelangeError(e.MEL_EXN_ID, e);
  }
}

function test_js_error3(param) {
  try {
    JSON.parse(" {\"x\"}");
    return 1;
  }
  catch (e){
    return 0;
  }
}

exports.f = f;
exports.assert_f = assert_f;
exports.hh = hh;
exports.A = A;
exports.B = B;
exports.C = C;
exports.u = u;
exports.test_not_found = test_not_found;
exports.test_js_error2 = test_js_error2;
exports.test_js_error3 = test_js_error3;
/* Js__Js_exn Not a pure module */
