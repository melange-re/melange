// Generated by Melange
'use strict';

let Caml_exceptions = require("melange.js/caml_exceptions.js");
let Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
let Caml_string = require("melange.js/caml_string.js");
let Curry = require("melange.js/curry.js");
let Stdlib = require("melange/stdlib.js");
let Stdlib__Arg = require("melange/arg.js");
let Stdlib__Format = require("melange/format.js");

function $$finally(v, action, f) {
  let e;
  try {
    e = Curry._1(f, v);
  }
  catch (e$1){
    Curry._1(action, v);
    throw new Caml_js_exceptions.MelangeError(e$1.MEL_EXN_ID, e$1);
  }
  Curry._1(action, v);
  return e;
}

function with_file_as_chan(filename, f) {
  return $$finally(Stdlib.open_out_bin(filename), Stdlib.close_out, f);
}

function with_file_as_pp(filename, f) {
  return $$finally(Stdlib.open_out_bin(filename), Stdlib.close_out, (function (chan) {
                let fmt = Stdlib__Format.formatter_of_out_channel(chan);
                let v = Curry._1(f, fmt);
                Stdlib__Format.pp_print_flush(fmt, undefined);
                return v;
              }));
}

function is_pos_pow(n) {
  let E = /* @__PURE__ */Caml_exceptions.create("E");
  try {
    let _c = 0;
    let _n = n;
    while(true) {
      let n$1 = _n;
      let c = _c;
      if (n$1 <= 0) {
        return -2;
      }
      if (n$1 === 1) {
        return c;
      }
      if ((n$1 & 1) === 0) {
        _n = (n$1 >> 1);
        _c = c + 1 | 0;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(E, {
                MEL_EXN_ID: E
              });
    };
  }
  catch (raw_exn){
    let exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.MEL_EXN_ID === E) {
      return -1;
    }
    throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
  }
}

function failwithf(loc, fmt) {
  return Stdlib__Format.ksprintf((function (s) {
                let s$1 = loc + s;
                throw new Caml_js_exceptions.MelangeError("Failure", {
                          MEL_EXN_ID: "Failure",
                          _1: s$1
                        });
              }), fmt);
}

function invalid_argf(fmt) {
  return Stdlib__Format.ksprintf(Stdlib.invalid_arg, fmt);
}

function bad_argf(fmt) {
  return Stdlib__Format.ksprintf((function (x) {
                throw new Caml_js_exceptions.MelangeError(Stdlib__Arg.Bad, {
                          MEL_EXN_ID: Stdlib__Arg.Bad,
                          _1: x
                        });
              }), fmt);
}

function hash_variant(s) {
  let accu = 0;
  for(let i = 0 ,i_finish = s.length; i < i_finish; ++i){
    accu = Math.imul(223, accu) + Caml_string.get(s, i) | 0;
  }
  accu = accu & 2147483647;
  if (accu > 1073741823) {
    return accu - -2147483648 | 0;
  } else {
    return accu;
  }
}

exports.$$finally = $$finally;
exports.with_file_as_chan = with_file_as_chan;
exports.with_file_as_pp = with_file_as_pp;
exports.is_pos_pow = is_pos_pow;
exports.failwithf = failwithf;
exports.invalid_argf = invalid_argf;
exports.bad_argf = bad_argf;
exports.hash_variant = hash_variant;
/* Stdlib__Format Not a pure module */
