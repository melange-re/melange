// Generated by Melange
'use strict';

var Caml = require("melange.js/caml.js");
var Caml_array = require("melange.js/caml_array.js");
var Caml_exceptions = require("melange.js/caml_exceptions.js");
var Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
var Caml_obj = require("melange.js/caml_obj.js");
var Curry = require("melange.js/curry.js");
var Mt = require("./mt.js");
var Stdlib__Array = require("melange/array.js");
var Stdlib__List = require("melange/list.js");

function starts_with(xs, prefix, p) {
  var H = /* @__PURE__ */Caml_exceptions.create("H");
  var len1 = xs.length;
  var len2 = prefix.length;
  if (len2 > len1) {
    return false;
  }
  try {
    for(var i = 0; i < len2; ++i){
      if (!Curry._2(p, Caml_array.get(xs, i), Caml_array.get(prefix, i))) {
        throw {
              MEL_EXN_ID: H,
              Error: new Error()
            };
      }
      
    }
    return true;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.MEL_EXN_ID === H) {
      return false;
    }
    throw exn;
  }
}

function is_sorted(x) {
  var len = x.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= (len - 1 | 0)) {
      return true;
    }
    if (!Caml_obj.caml_lessthan(Caml_array.get(x, i), Caml_array.get(x, i + 1 | 0))) {
      return false;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

var array_suites_0 = [
  "init",
  (function (param) {
      return {
              TAG: /* Eq */0,
              _0: Stdlib__Array.init(5, (function (x) {
                      return x;
                    })),
              _1: [
                0,
                1,
                2,
                3,
                4
              ]
            };
    })
];

var array_suites_1 = {
  hd: [
    "toList",
    (function (param) {
        var aux = function (xs) {
          return Stdlib__List.fold_left((function (acc, param) {
                        return {
                                hd: [
                                  Stdlib__Array.to_list(param[0]),
                                  param[1]
                                ],
                                tl: acc
                              };
                      }), /* [] */0, xs);
        };
        var match = Stdlib__List.split(aux({
                  hd: [
                    [],
                    /* [] */0
                  ],
                  tl: /* [] */0
                }));
        return {
                TAG: /* Eq */0,
                _0: match[0],
                _1: match[1]
              };
      })
  ],
  tl: {
    hd: [
      "concat",
      (function (param) {
          return {
                  TAG: /* Eq */0,
                  _0: [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5
                  ],
                  _1: Caml_array.concat({
                        hd: [
                          0,
                          1,
                          2
                        ],
                        tl: {
                          hd: [
                            3,
                            4
                          ],
                          tl: {
                            hd: [],
                            tl: {
                              hd: [5],
                              tl: /* [] */0
                            }
                          }
                        }
                      })
                };
        })
    ],
    tl: {
      hd: [
        "make",
        (function (param) {
            return {
                    TAG: /* Eq */0,
                    _0: [
                      Caml_array.make(100, /* 'a' */97),
                      Caml_array.make_float(100)
                    ],
                    _1: [
                      Stdlib__Array.init(100, (function (param) {
                              return /* 'a' */97;
                            })),
                      Stdlib__Array.init(100, (function (param) {
                              return 0;
                            }))
                    ]
                  };
          })
      ],
      tl: {
        hd: [
          "sub",
          (function (param) {
              return {
                      TAG: /* Eq */0,
                      _0: Stdlib__Array.sub([
                            0,
                            1,
                            2,
                            3,
                            4
                          ], 2, 2),
                      _1: [
                        2,
                        3
                      ]
                    };
            })
        ],
        tl: {
          hd: [
            "blit",
            (function (param) {
                var u = [
                  100,
                  0,
                  0
                ];
                var v = Stdlib__Array.init(3, (function (x) {
                        return (x << 1);
                      }));
                Stdlib__Array.blit(v, 1, u, 1, 2);
                return {
                        TAG: /* Eq */0,
                        _0: [
                          [
                            0,
                            2,
                            4
                          ],
                          [
                            100,
                            2,
                            4
                          ]
                        ],
                        _1: [
                          v,
                          u
                        ]
                      };
              })
          ],
          tl: {
            hd: [
              "File \"jscomp/test/array_test.ml\", line 62, characters 2-9",
              (function (param) {
                  var a0 = Stdlib__Array.init(100, (function (i) {
                          return (i << 0);
                        }));
                  Stdlib__Array.blit(a0, 10, a0, 5, 20);
                  return {
                          TAG: /* Eq */0,
                          _0: true,
                          _1: starts_with(a0, [
                                0,
                                1,
                                2,
                                3,
                                4,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28
                              ], (function (prim0, prim1) {
                                  return prim0 === prim1;
                                }))
                        };
                })
            ],
            tl: {
              hd: [
                "File \"jscomp/test/array_test.ml\", line 71, characters 2-9",
                (function (param) {
                    var a0 = Stdlib__Array.init(100, (function (i) {
                            return (i << 0);
                          }));
                    Stdlib__Array.blit(a0, 5, a0, 10, 20);
                    return {
                            TAG: /* Eq */0,
                            _0: true,
                            _1: starts_with(a0, [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  6,
                                  7,
                                  8,
                                  9,
                                  5,
                                  6,
                                  7,
                                  8,
                                  9,
                                  10,
                                  11,
                                  12,
                                  13,
                                  14,
                                  15,
                                  16,
                                  17,
                                  18,
                                  19,
                                  20
                                ], (function (prim0, prim1) {
                                    return prim0 === prim1;
                                  }))
                          };
                  })
              ],
              tl: {
                hd: [
                  "make",
                  (function (param) {
                      return {
                              TAG: /* Eq */0,
                              _0: Caml_array.make(2, 1),
                              _1: [
                                1,
                                1
                              ]
                            };
                    })
                ],
                tl: {
                  hd: [
                    "sort",
                    (function (param) {
                        var u = [
                          3,
                          0,
                          1
                        ];
                        Stdlib__Array.sort(Caml.caml_int_compare, u);
                        return {
                                TAG: /* Eq */0,
                                _0: Caml_obj.caml_equal([
                                      0,
                                      1,
                                      3
                                    ], u),
                                _1: true
                              };
                      })
                  ],
                  tl: {
                    hd: [
                      "sort_large",
                      (function (param) {
                          var v = Stdlib__Array.init(4, (function (i) {
                                  return i % 17;
                                }));
                          Stdlib__Array.sort(Caml.caml_int_compare, v);
                          return {
                                  TAG: /* Eq */0,
                                  _0: true,
                                  _1: is_sorted(v)
                                };
                        })
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

var array_suites = {
  hd: array_suites_0,
  tl: array_suites_1
};

Mt.from_pair_suites("Array_test", array_suites);

/*  Not a pure module */
