// Generated by Melange
'use strict';

let Mt = require("./mt.js");

let suites_0 = [
  "fromArray/toArray",
  (function (param) {
      let set = new Set([
            1,
            2,
            3
          ]);
      return {
              TAG: /* Eq */0,
              _0: [
                1,
                2,
                3
              ],
              _1: Array.from(set)
            };
    })
];

let suites_1 = {
  hd: [
    "size - empty set",
    (function (param) {
        let set = new Set();
        return {
                TAG: /* Eq */0,
                _0: 0,
                _1: set.size
              };
      })
  ],
  tl: {
    hd: [
      "size",
      (function (param) {
          let set = new Set([
                "one",
                "two",
                "two"
              ]);
          return {
                  TAG: /* Eq */0,
                  _0: 2,
                  _1: set.size
                };
        })
    ],
    tl: {
      hd: [
        "size - with duplicates",
        (function (param) {
            let set = new Set([
                  "one",
                  "one"
                ]);
            return {
                    TAG: /* Eq */0,
                    _0: 1,
                    _1: set.size
                  };
          })
      ],
      tl: {
        hd: [
          "has - true",
          (function (param) {
              let set = new Set([
                    "one",
                    "two"
                  ]);
              return {
                      TAG: /* Eq */0,
                      _0: true,
                      _1: set.has("two")
                    };
            })
        ],
        tl: {
          hd: [
            "has - false",
            (function (param) {
                let set = new Set([
                      "one",
                      "two"
                    ]);
                return {
                        TAG: /* Eq */0,
                        _0: false,
                        _1: set.has("three")
                      };
              })
          ],
          tl: {
            hd: [
              "delete",
              (function (param) {
                  let set = new Set([
                        "one",
                        "two"
                      ]);
                  let deleted = set.delete("two");
                  return {
                          TAG: /* Eq */0,
                          _0: [
                            true,
                            false
                          ],
                          _1: [
                            deleted,
                            set.has("two")
                          ]
                        };
                })
            ],
            tl: {
              hd: [
                "add",
                (function (param) {
                    let set = new Set().add("one").add("two");
                    return {
                            TAG: /* Eq */0,
                            _0: [
                              "one",
                              "two"
                            ],
                            _1: Array.from(set)
                          };
                  })
              ],
              tl: {
                hd: [
                  "clear",
                  (function (param) {
                      let set = new Set([
                            "one",
                            "two"
                          ]);
                      set.clear();
                      return {
                              TAG: /* Eq */0,
                              _0: 0,
                              _1: set.size
                            };
                    })
                ],
                tl: {
                  hd: [
                    "add mutate + return new set",
                    (function (param) {
                        let set_1 = new Set();
                        let set_2 = set_1.add("one");
                        let set_3 = set_2.add("two");
                        let all_same_size = set_1.size === 2 && set_2.size === 2 && set_3.size === 2;
                        let all_same_ref = set_1 === set_2 && set_2 === set_3;
                        return {
                                TAG: /* Eq */0,
                                _0: [
                                  true,
                                  true
                                ],
                                _1: [
                                  all_same_size,
                                  all_same_ref
                                ]
                              };
                      })
                  ],
                  tl: {
                    hd: [
                      "forEach",
                      (function (param) {
                          let set = new Set([
                                "one",
                                "two"
                              ]);
                          let arr = {
                            contents: []
                          };
                          set.forEach(function (value) {
                                arr.contents.push(value);
                              });
                          return {
                                  TAG: /* Eq */0,
                                  _0: [
                                    "one",
                                    "two"
                                  ],
                                  _1: arr.contents
                                };
                        })
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

let suites = {
  hd: suites_0,
  tl: suites_1
};

Mt.from_pair_suites("Js_set_test", suites);

exports.suites = suites;
/*  Not a pure module */
