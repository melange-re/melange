// Generated by Melange
'use strict';

const Belt__Belt_Array = require("melange.belt/belt_Array.js");
const Caml_option = require("melange.js/caml_option.js");
const Curry = require("melange.js/curry.js");

function t0(x, f) {
  return Curry._1(f, Curry._1(f, Curry._1(f, x)));
}

function t1(x, f) {
  return Curry._1(f, x);
}

function t2(x, f, g) {
  return Curry._2(f, Curry._3(g, Curry._1(f, x), x, x), x);
}

function t3(x, f) {
  return Curry._3(f, x, 1, 2);
}

function f(a, b, c) {
  return [
    Curry._1(b, a),
    Curry._1(c, a)
  ];
}

function f1(a, b, c, d) {
  const __ocaml_internal_obj = Curry._1(a, b);
  return [
    Curry._1(c, __ocaml_internal_obj),
    Curry._1(d, __ocaml_internal_obj)
  ];
}

function f2(a, b, c, d) {
  const __ocaml_internal_obj = Curry._1(a, b);
  const u = Curry._1(c, __ocaml_internal_obj);
  const v = Curry._1(d, __ocaml_internal_obj);
  return u + v | 0;
}

function f3(a, b, c, d, e) {
  const __ocaml_internal_obj = Curry._1(a, b);
  const u = Curry._2(c, __ocaml_internal_obj, d);
  const v = Curry._3(d, __ocaml_internal_obj, 1, 2);
  const h = Curry._1(e, __ocaml_internal_obj);
  return (u + v | 0) + h | 0;
}

function f4(a, b, c) {
  return [
    Curry._2(b, a, c),
    Curry._2(b, a, c)
  ];
}

function f5(a, b, c, d) {
  const v0 = Curry._3(b, a, c, c);
  const v1 = Curry._3(b, a, c, c);
  const v2 = Curry._3(b, a, d, d);
  return (v0 + v1 | 0) + v2 | 0;
}

function f6(a) {
  return Caml_option.some(a);
}

function f7(a) {
  return [
    Caml_option.some(a),
    Caml_option.some(a),
    Caml_option.some(a)
  ];
}

function f8(a) {
  return Caml_option.some(Caml_option.some(a));
}

function hi(x) {
  return Belt__Belt_Array.map(x, (function (x) {
        return x + 1 | 0;
      }));
}

const with_poly = {
  NAME: "Foo",
  VAL: 1
};

module.exports = {
  t0,
  t1,
  t2,
  t3,
  f,
  f1,
  f2,
  f3,
  f4,
  f5,
  f6,
  f7,
  f8,
  hi,
  with_poly,
}
/* No side effect */
