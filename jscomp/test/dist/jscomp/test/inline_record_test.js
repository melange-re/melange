// Generated by Melange
'use strict';

const Caml_exceptions = require("melange.js/caml_exceptions.js");
const Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
const Mt = require("./mt.js");
const Stdlib__List = require("melange/list.js");

const suites = {
  contents: /* [] */ 0
};

const test_id = {
  contents: 0
};

function eq(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

const v = {
  TAG: /* A0 */ 0,
  lbl: 3,
  more: /* [] */ 0
};

const v1 = {
  TAG: /* A1 */ 1,
  more: {
    hd: 1,
    tl: {
      hd: 2,
      tl: /* [] */ 0
    }
  }
};

function f(x) {
  if (x.TAG === /* A0 */ 0) {
    return Stdlib__List.fold_left((function (prim0, prim1) {
      return prim0 + prim1 | 0;
    }), x.lbl, x.more);
  } else {
    return Stdlib__List.fold_left((function (prim0, prim1) {
      return prim0 + prim1 | 0;
    }), 0, x.more);
  }
}

eq("File \"jscomp/test/inline_record_test.ml\", line 20, characters 6-13", f(v), 3);

eq("File \"jscomp/test/inline_record_test.ml\", line 21, characters 6-13", f(v1), 3);

console.log(f(v));

console.log(f(v1));

const A0 = /* @__PURE__ */ Caml_exceptions.create("Inline_record_test.A0");

const v3 = {
  MEL_EXN_ID: A0,
  lbl: 3,
  more: /* [] */ 0
};

let tmp;

if (A0 === A0) {
  tmp = 3;
} else {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
        MEL_EXN_ID: "Assert_failure",
        _1: [
          "jscomp/test/inline_record_test.ml",
          46,
          54
        ]
      });
}

eq("File \"jscomp/test/inline_record_test.ml\", line 46, characters 6-13", tmp, 3);

function ff(x) {
  if (x.TAG === /* A0 */ 0) {
    x.x = x.x + 1 | 0;
  } else {
    x.z = x.z + 2 | 0;
  }
}

const v4 = {
  TAG: /* A0 */ 0,
  x: 0,
  y: 0,
  z: 0
};

const v5 = {
  TAG: /* A1 */ 1,
  z: 0
};

for (let _i = 0; _i <= 10; ++_i) {
  ff(v4);
  ff(v5);
}

let tmp$1;

if (v4.TAG === /* A0 */ 0) {
  tmp$1 = v4.x;
} else {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
        MEL_EXN_ID: "Assert_failure",
        _1: [
          "jscomp/test/inline_record_test.ml",
          64,
          48
        ]
      });
}

eq("File \"jscomp/test/inline_record_test.ml\", line 64, characters 6-13", tmp$1, 11);

let tmp$2;

if (v5.TAG === /* A0 */ 0) {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
        MEL_EXN_ID: "Assert_failure",
        _1: [
          "jscomp/test/inline_record_test.ml",
          66,
          48
        ]
      });
}

tmp$2 = v5.z;

eq("File \"jscomp/test/inline_record_test.ml\", line 66, characters 6-13", tmp$2, 22);

const A4 = /* @__PURE__ */ Caml_exceptions.create("Inline_record_test.A4");

const v6 = {
  MEL_EXN_ID: A4,
  x: 0,
  y: 0,
  z: 0
};

function ff0(x) {
  if (x.MEL_EXN_ID === A4) {
    x.x = x.x + 1 | 0;
    x.z = x.z + 1 | 0;
    return;
  }
  
}

for (let _i$1 = 0; _i$1 <= 10; ++_i$1) {
  ff0(v6);
}

let tmp$3;

if (v6.MEL_EXN_ID === A4) {
  tmp$3 = v6.x;
} else {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
        MEL_EXN_ID: "Assert_failure",
        _1: [
          "jscomp/test/inline_record_test.ml",
          82,
          49
        ]
      });
}

eq("File \"jscomp/test/inline_record_test.ml\", line 82, characters 6-13", tmp$3, 11);

function ff1(x) {
  if (/* tag */ typeof x === "number" || typeof x === "string") {
    return /* A1 */ 0;
  } else {
    return {
      TAG: /* A0 */ 0,
      lbl: x.lbl + 1 | 0,
      more: x.more
    };
  }
}

Mt.from_pair_suites("Inline_record_test", suites.contents);

const v2 = {
  TAG: /* A0 */ 0,
  lbl: 3,
  more: /* [] */ 0
};

const vvv = {
  TAG: /* A0 */ 0,
  lbl: 3,
  more: /* [] */ 0
};

module.exports = {
  suites,
  test_id,
  eq,
  v,
  v1,
  f,
  v2,
  A0,
  v3,
  vvv,
  ff,
  v4,
  v5,
  A4,
  v6,
  ff0,
  ff1,
}
/*  Not a pure module */
