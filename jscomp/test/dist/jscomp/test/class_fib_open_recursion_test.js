// Generated by Melange
'use strict';

const Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
const Caml_oo_curry = require("melange.js/caml_oo_curry.js");
const CamlinternalOO = require("melange/camlinternalOO.js");
const Curry = require("melange.js/curry.js");
const Mt = require("./mt.js");
const Stdlib = require("melange/stdlib.js");
const Stdlib__Hashtbl = require("melange/hashtbl.js");

const shared = ["calc"];

const suites = {
  contents: /* [] */0
};

const test_id = {
  contents: 0
};

function eq(loc, x, y) {
  test_id.contents = test_id.contents + 1 | 0;
  suites.contents = {
    hd: [
      loc + (" id " + String(test_id.contents)),
      (function (param) {
          return {
                  TAG: /* Eq */0,
                  _0: x,
                  _1: y
                };
        })
    ],
    tl: suites.contents
  };
}

function fib_init($$class) {
  const calc = CamlinternalOO.get_method_label($$class, "calc");
  CamlinternalOO.set_method($$class, calc, (function (self$1, x) {
          if (x === 0 || x === 1) {
            return 1;
          } else {
            return Curry._2(self$1[0][calc], self$1, x - 1 | 0) + Curry._2(self$1[0][calc], self$1, x - 2 | 0) | 0;
          }
        }));
  return function (env, self) {
    return CamlinternalOO.create_object_opt(self, $$class);
  };
}

const fib = CamlinternalOO.make_class(shared, fib_init);

function memo_fib_init($$class) {
  const ids = CamlinternalOO.new_methods_variables($$class, shared, ["cache"]);
  const calc = ids[0];
  const cache = ids[1];
  const inh = CamlinternalOO.inherits($$class, 0, 0, shared, fib, true);
  const obj_init = inh[0];
  const calc$1 = inh[1];
  CamlinternalOO.set_method($$class, calc, (function (self$2, x) {
          try {
            return Stdlib__Hashtbl.find(self$2[cache], x);
          }
          catch (raw_exn){
            const exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.MEL_EXN_ID === Stdlib.Not_found) {
              const v = Curry._2(calc$1, self$2, x);
              Stdlib__Hashtbl.add(self$2[cache], x, v);
              return v;
            }
            throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
          }
        }));
  return function (env, self) {
    const self$1 = CamlinternalOO.create_object_opt(self, $$class);
    self$1[cache] = Stdlib__Hashtbl.create(undefined, 31);
    Curry._1(obj_init, self$1);
    return CamlinternalOO.run_initializers_opt(self, self$1, $$class);
  };
}

const memo_fib = CamlinternalOO.make_class(shared, memo_fib_init);

const tmp = Curry._1(memo_fib[0], undefined);

eq("File \"jscomp/test/class_fib_open_recursion_test.ml\", line 33, characters 5-12", Caml_oo_curry.js2(-1044768619, 1, tmp, 40), 165580141);

Mt.from_pair_suites("Class_fib_open_recursion_test", suites.contents);

exports.suites = suites;
exports.test_id = test_id;
exports.eq = eq;
exports.fib = fib;
exports.memo_fib = memo_fib;
/* fib Not a pure module */
