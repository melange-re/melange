// Generated by Melange
'use strict';

let Caml_js_exceptions = require("melange.js/caml_js_exceptions.js");
let Curry = require("melange.js/curry.js");

function peek_queue(param) {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
            MEL_EXN_ID: "Assert_failure",
            _1: [
              "jscomp/test/format_regression.ml",
              10,
              19
            ]
          });
}

function int_of_size(param) {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
            MEL_EXN_ID: "Assert_failure",
            _1: [
              "jscomp/test/format_regression.ml",
              11,
              20
            ]
          });
}

function take_queue(param) {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
            MEL_EXN_ID: "Assert_failure",
            _1: [
              "jscomp/test/format_regression.ml",
              12,
              19
            ]
          });
}

function format_pp_token(param, param$1) {
  throw new Caml_js_exceptions.MelangeError("Assert_failure", {
            MEL_EXN_ID: "Assert_failure",
            _1: [
              "jscomp/test/format_regression.ml",
              13,
              26
            ]
          });
}

function advance_loop(state) {
  while(true) {
    const match = peek_queue(state.pp_queue);
    const size = match.elem_size;
    const size$1 = int_of_size(size);
    if (size$1 < 0 && (state.pp_right_total - state.pp_left_total | 0) < state.pp_space_left) {
      return ;
    }
    take_queue(state.pp_queue);
    Curry._1(format_pp_token(state, size$1 < 0 ? 1000000010 : size$1), match.token);
    state.pp_left_total = match.length + state.pp_left_total | 0;
    continue ;
  };
}

const pp_infinity = 1000000010;

exports.peek_queue = peek_queue;
exports.int_of_size = int_of_size;
exports.take_queue = take_queue;
exports.format_pp_token = format_pp_token;
exports.pp_infinity = pp_infinity;
exports.advance_loop = advance_loop;
/* No side effect */
