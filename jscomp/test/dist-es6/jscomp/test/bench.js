// Generated by Melange

import * as Curry from "melange/lib/es6/curry.mjs";
import * as Stdlib from "melange.stdlib/jscomp/stdlib-412/stdlib.js";
import * as Caml_array from "melange/lib/es6/caml_array.mjs";

function map(f, a) {
  var f$1 = Curry.__1(f);
  var l = a.length;
  if (l === 0) {
    return [];
  }
  var r = Caml_array.make(l, f$1(a[0]));
  for(var i = 1; i < l; ++i){
    r[i] = f$1(a[i]);
  }
  return r;
}

function init(l, f) {
  var f$1 = Curry.__1(f);
  if (l === 0) {
    return [];
  }
  if (l < 0) {
    throw {
          RE_EXN_ID: "Invalid_argument",
          _1: "Array.init",
          Error: new Error()
        };
  }
  var res = Caml_array.make(l, f$1(0));
  for(var i = 1; i < l; ++i){
    res[i] = f$1(i);
  }
  return res;
}

function fold_left(f, x, a) {
  var f$1 = Curry.__2(f);
  var r = x;
  for(var i = 0 ,i_finish = a.length; i < i_finish; ++i){
    r = f$1(r, a[i]);
  }
  return r;
}

function f2(param) {
  var arr = init(3000000, (function (i) {
          return i;
        }));
  var b = map((function (i) {
          return i + i - 1;
        }), arr);
  var v = fold_left((function (prim0, prim1) {
          return prim0 + prim1;
        }), 0, b);
  console.log(Stdlib.string_of_float(v));
}

f2(undefined);

export {
  map ,
  init ,
  fold_left ,
  f2 ,
}
/*  Not a pure module */
