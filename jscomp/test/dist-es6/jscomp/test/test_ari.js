// Generated by Melange

import * as U from "U";
import * as VV from "VV";
import * as List from "melange/jscomp/stdlib-412/stdlib_modules/list.js";
import * as Curry from "melange/lib/es6/curry.mjs";

function f(x) {
  return function (param) {
    return x + param | 0;
  };
}

function f1(x, y) {
  return x + y | 0;
}

function f3(g, x) {
  return Curry._1(g, x);
}

function f2(param) {
  return 3 + param | 0;
}

var g = 7;

function ff(param) {
  return U.test_primit(3, param);
}

var fff = VV.test_primit2(3);

function length_aux(_len, _param) {
  while(true) {
    var param = _param;
    var len = _len;
    if (!param) {
      return len;
    }
    _param = param.tl;
    _len = len + 1 | 0;
    continue ;
  };
}

var length = List.length;

var compare_lengths = List.compare_lengths;

var compare_length_with = List.compare_length_with;

var cons = List.cons;

var hd = List.hd;

var tl = List.tl;

var nth = List.nth;

var nth_opt = List.nth_opt;

var rev = List.rev;

var init = List.init;

var append = List.append;

var rev_append = List.rev_append;

var concat = List.concat;

var flatten = List.flatten;

var equal = List.equal;

var compare = List.compare;

var iter = List.iter;

var iteri = List.iteri;

var map = List.map;

var mapi = List.mapi;

var rev_map = List.rev_map;

var filter_map = List.filter_map;

var concat_map = List.concat_map;

var fold_left_map = List.fold_left_map;

var fold_left = List.fold_left;

var fold_right = List.fold_right;

var iter2 = List.iter2;

var map2 = List.map2;

var rev_map2 = List.rev_map2;

var fold_left2 = List.fold_left2;

var fold_right2 = List.fold_right2;

var for_all = List.for_all;

var exists = List.exists;

var for_all2 = List.for_all2;

var exists2 = List.exists2;

var mem = List.mem;

var memq = List.memq;

var find = List.find;

var find_opt = List.find_opt;

var find_map = List.find_map;

var filter = List.filter;

var find_all = List.find_all;

var filteri = List.filteri;

var partition = List.partition;

var partition_map = List.partition_map;

var assoc = List.assoc;

var assoc_opt = List.assoc_opt;

var assq = List.assq;

var assq_opt = List.assq_opt;

var mem_assoc = List.mem_assoc;

var mem_assq = List.mem_assq;

var remove_assoc = List.remove_assoc;

var remove_assq = List.remove_assq;

var split = List.split;

var combine = List.combine;

var sort = List.sort;

var stable_sort = List.stable_sort;

var fast_sort = List.fast_sort;

var sort_uniq = List.sort_uniq;

var merge = List.merge;

var to_seq = List.to_seq;

var of_seq = List.of_seq;

export {
  f ,
  f1 ,
  f3 ,
  f2 ,
  g ,
  ff ,
  fff ,
  length_aux ,
  length ,
  compare_lengths ,
  compare_length_with ,
  cons ,
  hd ,
  tl ,
  nth ,
  nth_opt ,
  rev ,
  init ,
  append ,
  rev_append ,
  concat ,
  flatten ,
  equal ,
  compare ,
  iter ,
  iteri ,
  map ,
  mapi ,
  rev_map ,
  filter_map ,
  concat_map ,
  fold_left_map ,
  fold_left ,
  fold_right ,
  iter2 ,
  map2 ,
  rev_map2 ,
  fold_left2 ,
  fold_right2 ,
  for_all ,
  exists ,
  for_all2 ,
  exists2 ,
  mem ,
  memq ,
  find ,
  find_opt ,
  find_map ,
  filter ,
  find_all ,
  filteri ,
  partition ,
  partition_map ,
  assoc ,
  assoc_opt ,
  assq ,
  assq_opt ,
  mem_assoc ,
  mem_assq ,
  remove_assoc ,
  remove_assq ,
  split ,
  combine ,
  sort ,
  stable_sort ,
  fast_sort ,
  sort_uniq ,
  merge ,
  to_seq ,
  of_seq ,
}
/* fff Not a pure module */
