// Generated by Melange

import * as Mt from "./mt.mjs";
import * as Caml from "melange/lib/es6/caml.mjs";
import * as Belt_Id from "melange.runtime-others/jscomp/others/belt_Id.mjs";
import * as Hashtbl from "melange/jscomp/stdlib-412/stdlib_modules/hashtbl.mjs";
import * as Belt_Array from "melange.runtime-others/jscomp/others/belt_Array.mjs";
import * as Belt_HashMap from "melange.runtime-others/jscomp/others/belt_HashMap.mjs";
import * as Belt_SortArray from "melange.runtime-others/jscomp/others/belt_SortArray.mjs";
import * as Array_data_util from "./array_data_util.mjs";
import * as Belt_internalBucketsType from "melange.runtime-others/jscomp/others/belt_internalBucketsType.mjs";

var suites = {
  contents: /* [] */0
};

var test_id = {
  contents: 0
};

function eqx(loc, x, y) {
  Mt.eq_suites(test_id, suites, loc, x, y);
}

function b(loc, x) {
  Mt.bool_suites(test_id, suites, loc, x);
}

function eq(x, y) {
  return x === y;
}

var hash = Hashtbl.hash;

var cmp = Caml.caml_int_compare;

var Y = Belt_Id.hashable(hash, eq);

var empty = Belt_internalBucketsType.make(Y.hash, Y.eq, 30);

function add(prim0, prim1) {
  return prim0 + prim1 | 0;
}

Belt_HashMap.mergeMany(empty, [
      [
        1,
        1
      ],
      [
        2,
        3
      ],
      [
        3,
        3
      ],
      [
        2,
        2
      ]
    ]);

eqx("File \"bs_hashmap_test.ml\", line 31, characters 6-13", Belt_HashMap.get(empty, 2), 2);

eqx("File \"bs_hashmap_test.ml\", line 32, characters 6-13", empty.size, 3);

var u = Belt_Array.concat(Array_data_util.randomRange(30, 100), Array_data_util.randomRange(40, 120));

var v = Belt_Array.zip(u, u);

var xx = Belt_HashMap.fromArray(v, Y);

eqx("File \"bs_hashmap_test.ml\", line 41, characters 6-13", xx.size, 91);

eqx("File \"bs_hashmap_test.ml\", line 42, characters 6-13", Belt_SortArray.stableSortBy(Belt_HashMap.keysToArray(xx), cmp), Array_data_util.range(30, 120));

var u$1 = Belt_Array.concat(Array_data_util.randomRange(0, 100000), Array_data_util.randomRange(0, 100));

var v$1 = Belt_internalBucketsType.make(Y.hash, Y.eq, 40);

Belt_HashMap.mergeMany(v$1, Belt_Array.zip(u$1, u$1));

eqx("File \"bs_hashmap_test.ml\", line 48, characters 6-13", v$1.size, 100001);

for(var i = 0; i <= 1000; ++i){
  Belt_HashMap.remove(v$1, i);
}

eqx("File \"bs_hashmap_test.ml\", line 52, characters 6-13", v$1.size, 99000);

for(var i$1 = 0; i$1 <= 2000; ++i$1){
  Belt_HashMap.remove(v$1, i$1);
}

eqx("File \"bs_hashmap_test.ml\", line 56, characters 6-13", v$1.size, 98000);

b("File \"bs_hashmap_test.ml\", line 57, characters 4-11", Belt_Array.every(Array_data_util.range(2001, 100000), (function (x) {
            return Belt_HashMap.has(v$1, x);
          })));

Mt.from_pair_suites("Bs_hashmap_test", suites.contents);

var $plus$plus = Belt_Array.concat;

export {
  suites ,
  test_id ,
  eqx ,
  b ,
  eq ,
  hash ,
  cmp ,
  Y ,
  empty ,
  $plus$plus ,
  add ,
}
/* Y Not a pure module */
