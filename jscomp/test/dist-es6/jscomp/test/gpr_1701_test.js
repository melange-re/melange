// Generated by Melange

import * as List from "melange/jscomp/stdlib-412/stdlib_modules/list.js";
import * as Stdlib from "melange.stdlib/jscomp/stdlib-412/stdlib.js";
import * as Caml_exceptions from "melange/lib/es6/caml_exceptions.mjs";
import * as Caml_js_exceptions from "melange/lib/es6/caml_js_exceptions.mjs";

var Foo = /* @__PURE__ */Caml_exceptions.create("Gpr_1701_test.Foo");

function test(n) {
  if (n === 0) {
    throw {
          RE_EXN_ID: Foo,
          Error: new Error()
        };
  }
  try {
    return test(n - 1 | 0);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Foo) {
      return ;
    }
    throw exn;
  }
}

test(100);

function read_lines(inc) {
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var l;
    try {
      l = Stdlib.input_line(inc);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Stdlib.End_of_file) {
        l = undefined;
      } else {
        throw exn;
      }
    }
    if (l === undefined) {
      return List.rev(acc);
    }
    _acc = {
      hd: l,
      tl: acc
    };
    continue ;
  };
}

function read_lines2(inc) {
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var l;
    try {
      l = Stdlib.input_line(inc);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Stdlib.End_of_file) {
        return List.rev(acc);
      }
      throw exn;
    }
    _acc = {
      hd: l,
      tl: acc
    };
    continue ;
  };
}

function read_lines3(inc) {
  var loop = function (acc) {
    try {
      var l = Stdlib.input_line(inc);
      return loop({
                  hd: l,
                  tl: acc
                });
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn.RE_EXN_ID === Stdlib.End_of_file) {
        return List.rev(acc);
      }
      throw exn;
    }
  };
  return loop(/* [] */0);
}

function fff(f, x) {
  try {
    return fff(f, x);
  }
  catch (exn){
    return x + 1 | 0;
  }
}

export {
  Foo ,
  test ,
  read_lines ,
  read_lines2 ,
  read_lines3 ,
  fff ,
}
/*  Not a pure module */
