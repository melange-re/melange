// Generated by Melange

import * as Mt from "./mt.js";
import * as Js_mapperRt from "melange.runtime-others/jscomp/others/js_mapperRt.js";

var suites = {
  contents: /* [] */0
};

var test_id = {
  contents: 0
};

function eq(loc, x, y) {
  test_id.contents = test_id.contents + 1 | 0;
  suites.contents = {
    hd: [
      loc + (" id " + String(test_id.contents)),
      (function (param) {
          return {
                  TAG: /* Eq */0,
                  _0: x,
                  _1: y
                };
        })
    ],
    tl: suites.contents
  };
}

function tToJs(param) {
  return {
          x: param.x,
          y: param.y,
          z: param.z
        };
}

function tFromJs(param) {
  return {
          x: param.x,
          y: param.y,
          z: param.z
        };
}

var v0 = {
  x: 3,
  y: false,
  z: false
};

var v1 = {
  x: 3,
  y: false,
  z: ""
};

var _map = {"a":"a","b":"b","c":"c"};

function xToJs(param) {
  return param;
}

function xFromJs(param) {
  return Js_mapperRt.raiseWhenNotFound(_map[param]);
}

function idx(v) {
  eq("File \"ast_abstract_test.ml\", line 32, characters 17-24", xFromJs(v), v);
}

idx("a");

idx("b");

idx("c");

var jsMapperConstantArray = [
  0,
  3,
  4
];

function aToJs(param) {
  return jsMapperConstantArray[param];
}

function aFromJs(param) {
  return Js_mapperRt.fromIntAssert(3, jsMapperConstantArray, param);
}

function id(x) {
  eq("File \"ast_abstract_test.ml\", line 49, characters 8-15", aFromJs(aToJs(x)), x);
}

var a0 = aToJs(/* A */0);

var a1 = aToJs(/* B */1);

id(/* A */0);

id(/* B */1);

id(/* C */2);

function bToJs(param) {
  return param + 0 | 0;
}

function bFromJs(param) {
  if (!(param <= 3 && 0 <= param)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "_none_",
            0,
            -1
          ],
          Error: new Error()
        };
  }
  return param - 0 | 0;
}

function idb(v) {
  eq("File \"ast_abstract_test.ml\", line 71, characters 5-12", bFromJs(v + 0 | 0), v);
}

idb(/* D0 */0);

idb(/* D1 */1);

idb(/* D2 */2);

idb(/* D3 */3);

function cToJs(param) {
  return param + 3 | 0;
}

function cFromJs(param) {
  if (!(param <= 6 && 3 <= param)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "_none_",
            0,
            -1
          ],
          Error: new Error()
        };
  }
  return param - 3 | 0;
}

function idc(v) {
  eq("File \"ast_abstract_test.ml\", line 83, characters 15-22", cFromJs(v + 3 | 0), v);
}

idc(/* D0 */0);

idc(/* D1 */1);

idc(/* D2 */2);

idc(/* D3 */3);

function hToJs(param) {
  return param + 0 | 0;
}

function hFromJs(param) {
  if (!(param <= 1 && 0 <= param)) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "_none_",
            0,
            -1
          ],
          Error: new Error()
        };
  }
  return param - 0 | 0;
}

function zToJs(param) {
  return param + 0 | 0;
}

function zFromJs(param) {
  if (param <= 2 && 0 <= param) {
    return param - 0 | 0;
  }
  
}

Mt.from_pair_suites("Ast_abstract_test", suites.contents);

var x0 = "a";

var x1 = "b";

var b0 = 0;

var b1 = 1;

var c0 = 3;

var jsMapperEraseType = /* JsMapperEraseType */0;

var b = /* B */1;

var zXx = /* ZXx */2;

export {
  suites ,
  test_id ,
  eq ,
  tToJs ,
  tFromJs ,
  v0 ,
  v1 ,
  xToJs ,
  xFromJs ,
  idx ,
  x0 ,
  x1 ,
  aToJs ,
  aFromJs ,
  id ,
  a0 ,
  a1 ,
  bToJs ,
  bFromJs ,
  b0 ,
  b1 ,
  idb ,
  cToJs ,
  cFromJs ,
  c0 ,
  idc ,
  jsMapperEraseType ,
  b ,
  hToJs ,
  hFromJs ,
  zXx ,
  zToJs ,
  zFromJs ,
}
/*  Not a pure module */
