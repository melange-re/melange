// Generated by Melange

import * as Caml_obj from "melange/lib/es6/caml_obj.mjs";

function bool_equal(x, y) {
  if (x) {
    if (y) {
      return true;
    } else {
      return false;
    }
  } else if (y) {
    return false;
  } else {
    return true;
  }
}

function assertions(param) {
  if (true !== true) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_bool_equal.ml",
            25,
            2
          ],
          Error: new Error()
        };
  }
  if (false !== false) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_bool_equal.ml",
            26,
            2
          ],
          Error: new Error()
        };
  }
  if (true === false) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_bool_equal.ml",
            27,
            2
          ],
          Error: new Error()
        };
  }
  if (false !== true) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_bool_equal.ml",
          28,
          2
        ],
        Error: new Error()
      };
}

function f0(x) {
  if (x === true) {
    return 1;
  } else {
    return 2;
  }
}

function f1(x) {
  if (x !== true) {
    return 1;
  } else {
    return 2;
  }
}

function f2(x) {
  if (x === true) {
    return 1;
  } else {
    return 2;
  }
}

function f3(x) {
  if (x === false) {
    return 1;
  } else {
    return 2;
  }
}

function f4(x) {
  if (x !== true) {
    return 1;
  } else {
    return 2;
  }
}

function f5(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

function f6(x) {
  if (Caml_obj.caml_equal(x, /* [] */0)) {
    return 1;
  } else {
    return 2;
  }
}

function f7(x) {
  if (x.length !== 0) {
    return 1;
  } else {
    return 2;
  }
}

function f8(x) {
  return 1;
}

export {
  bool_equal ,
  assertions ,
  f0 ,
  f1 ,
  f2 ,
  f3 ,
  f4 ,
  f5 ,
  f6 ,
  f7 ,
  f8 ,
}
/* No side effect */
