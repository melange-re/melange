let prelude =
  {|
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(** Generated by scripts/caml_oo_curry_gen.ml *)

open Melange_mini_stdlib

external function_length : 'a -> int = "#function_length"

(** For efficiency, [args.(0)] would contain obj as well  *)
let js label cacheid obj args =
  let meth =
    (Obj.magic Caml_oo.caml_get_public_method obj label cacheid) in
  Curry.app meth args

|}

let list_init n fn = Array.to_list (Array.init n fn)
let number = 8

let generate_fun args_number =
  let args_array = Array.init args_number (fun i -> Printf.sprintf "a%d" i) in
  let args = Array.to_list args_array in
  let args_string = String.concat " " args in
  Printf.sprintf
    {|
let js%d label cacheid %s =
  Curry._%d (Obj.magic Caml_oo.caml_get_public_method %s label cacheid) %s
|}
    args_number args_string args_number (List.hd args) args_string

let () =
  print_endline
  @@ Printf.sprintf "%s\n%s" prelude
       (String.concat "\n" (list_init number (fun i -> generate_fun (i + 1))))

(* local variables: *)
(* compile-command: "ocaml caml_oo_curry_gen.ml > ../jscomp/runtime/caml_oo_curry.ml" *)
(* end: *)
