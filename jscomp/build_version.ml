let ( .?() ) = Map_string.find_opt

let file_contents ~version ~name =
  Format.asprintf
    {|
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)
let version = %S
let header =
   "// Generated by Melange"
let package_name = ref %S
|}
    version name

let pkg_json = "../../package.json"

type json_map = Ext_json_types.t Map_string.t

let extract_package_name_and_version (map : json_map) : string * string =
  let package_name =
    match map.?("name") with
    | Some (Str { str = name; _ }) -> name
    | Some _ -> failwith "name expect a string field"
    | None -> failwith "field name is required"
  in
  let version =
    match map.?("version") with
    | Some (Str { str = version; _ }) -> version
    | None | Some _ -> failwith "version field expects a string"
  in
  (package_name, version)

let build_version () =
  let name, version =
    match Ext_json_parse.parse_json_from_file pkg_json with
    | Obj { map; _ } -> extract_package_name_and_version map
    | _ -> assert false
  in
  let target = Sys.argv.(1) in
  let content = file_contents ~version ~name in
  let f = open_out_bin target in
  output_string f content;
  close_out f

let () = build_version ()
