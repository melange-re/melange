(library
 (name melangelib)
 (libraries
  melstd
  melange_compiler_libs
  melange_ffi
  ppxlib.ast
  dune-build-info))

(rule
 (targets compile_letrec.ml)
 (deps compile_letrec.520.ml)
 (action
  (copy %{deps} %{targets}))
 (enabled_if
  (>= %{ocaml_version} 5.2.0)))

(rule
 (targets lambda_simplif.ml)
 (deps lambda_simplif.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets compile_rec_module.ml)
 (deps compile_rec_module.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets js_implementation.ml)
 (deps js_implementation.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets matching_polyfill.ml)
 (deps matching_polyfill.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets lam_convert.ml)
 (deps lam_convert.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets polyvar_pattern_match.ml)
 (deps polyvar_pattern_match.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets initialization.ml)
 (deps initialization.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (targets ast_io.ml)
 (deps ast_io.cppo.ml)
 (action
  (run
   cppo
   -V
   OCAML:%{ocaml_version}
   %{env:CPPO_FLAGS=}
   %{deps}
   -o
   %{targets})))

(rule
 (target include_dirs.ml)
 (deps include_dirs.dev.ml include_dirs.release.ml)
 (action
  (copy# include_dirs.%{profile}.ml %{target})))

(rule
 (target js_pass_debug.ml)
 (deps js_pass_debug.dev.ml js_pass_debug.release.ml)
 (action
  (copy# js_pass_debug.%{profile}.ml %{target})))

(rule
 (targets lam_pass_lets_dce.ml)
 (deps lam_pass_lets_dce.cppo.ml)
 (action
  (run cppo %{env:CPPO_FLAGS=} %{deps} -o %{targets})))

(rule
 (target lam_dump.ml)
 (deps lam_dump.dev.ml lam_dump.release.ml)
 (action
  (copy# lam_dump.%{profile}.ml %{target})))

(rule
 (targets lam_compile_main.ml)
 (deps lam_compile_main.cppo.ml)
 (action
  (run cppo %{env:CPPO_FLAGS=} %{deps} -o %{targets})))

(rule
 (targets js_record_iter.ml)
 (deps j.ml)
 (action
  (with-stdout-to
   %{targets}
   (run
    ./gen/gen_traversal.exe
    --input
    %{deps}
    --output
    %{targets}
    --mode
    record-iter))))

(rule
 (targets js_record_map.ml)
 (deps j.ml)
 (action
  (with-stdout-to
   %{targets}
   (run
    ./gen/gen_traversal.exe
    --input
    %{deps}
    --output
    %{targets}
    --mode
    record-map))))

(rule
 (targets js_record_fold.ml)
 (deps j.ml)
 (action
  (with-stdout-to
   %{targets}
   (run
    ./gen/gen_traversal.exe
    --input
    %{deps}
    --output
    %{targets}
    --mode
    record-fold))))

(rule
 (targets git_commit.ml)
 (action
  (with-stdout-to
   %{targets}
   (progn
    (bash "echo let version = \\\"$(git rev-parse --verify HEAD)\\\"")
    (bash "echo let short_version = \\\"$(git rev-parse --short HEAD)\\\"")))))
