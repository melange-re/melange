(library
 (name melangelib)
 (modules_without_implementation js_op j)
 (libraries
  melstd
  melange_compiler_libs
  melange_ffi
  ppxlib.ast
  dune-build-info))

(rule
 (target include_dirs.ml)
 (deps include_dirs.dev.ml include_dirs.release.ml)
 (action
  (copy# include_dirs.%{profile}.ml %{target})))

(rule
 (target js_pass_debug.ml)
 (deps js_pass_debug.dev.ml js_pass_debug.release.ml)
 (action
  (copy# js_pass_debug.%{profile}.ml %{target})))

(rule
 (targets lam_pass_lets_dce.ml)
 (deps lam_pass_lets_dce.cppo.ml)
 (action
  (run cppo %{env:CPPO_FLAGS=} %{deps} -o %{targets})))

(rule
 (target lam_dump.ml)
 (deps lam_dump.dev.ml lam_dump.release.ml)
 (action
  (copy# lam_dump.%{profile}.ml %{target})))

(rule
 (targets lam_compile_main.ml)
 (deps lam_compile_main.cppo.ml)
 (action
  (run cppo %{env:CPPO_FLAGS=} %{deps} -o %{targets})))

(rule
 (targets js_record_iter.ml)
 (deps j.mli)
 (action
  (with-stdout-to
   %{targets}
   (run ./gen/gen_traversal.exe --input %{deps} --mode record-iter))))

(rule
 (targets js_record_map.ml)
 (deps j.mli)
 (action
  (with-stdout-to
   %{targets}
   (run ./gen/gen_traversal.exe --input %{deps} --mode record-map))))

(rule
 (targets js_record_fold.ml)
 (deps j.mli)
 (action
  (with-stdout-to
   %{targets}
   (run ./gen/gen_traversal.exe --input %{deps} --mode record-fold))))

(rule
 (targets git_commit.ml)
 (action
  (with-stdout-to
   %{targets}
   (progn
    (bash "echo let version = \\\"$(git rev-parse --verify HEAD)\\\"")
    (bash "echo let short_version = \\\"$(git rev-parse --short HEAD)\\\"")))))
